
# shmat ______________________________________________________
#
# long sys_shmat(int shmid, char __user *shmaddr, int shmflg)
#
probe nd_syscall.shmat = kprobe.function("sys_shmat") ?
{
	name = "shmat"
	asmlinkage()
	shmid = int_arg(1)
	shmaddr_uaddr = pointer_arg(2)
	shmflg = int_arg(3)
	argstr = sprintf("%d, %p, %s", shmid, shmaddr_uaddr, _shmat_flags_str(shmflg))
}
probe nd_syscall.shmat.return = kprobe.function("sys_shmat").return ?
{
	name = "shmat"
	retstr = returnstr(1)
}

# compat_sys_shmat ________________________________________
#
# long compat_sys_shmat(int first, int second, compat_uptr_t third,
#			int version, void __user *uptr)
# COMPAT_SYSCALL_DEFINE3(shmat, int, shmid, compat_uptr_t, shmaddr,
#			 int, shmflg)
#
probe nd_syscall.compat_sys_shmat = kprobe.function("compat_sys_shmat") ?
{
	name = "shmat"

%( systemtap_v < "2.3" %?
	first = int_arg(1)
	second = int_arg(2)
	third = u32_arg(3)
	uptr_uaddr = pointer_arg(5)
%)
	shmid = int_arg(1)
%( kernel_v > "3.9" || CONFIG_ARCH_WANT_OLD_COMPAT_IPC == "y" %?
	shmflg = int_arg(3)
	shmaddr_uaddr = pointer_arg(2)
%:
	shmflg = int_arg(2)
	shmaddr_uaddr = pointer_arg(5)
%)
	argstr = sprintf("%d, %p, %s", shmid, shmaddr_uaddr,
	 		 _shmat_flags_str(shmflg))
}
probe nd_syscall.compat_sys_shmat.return = kprobe.function("compat_sys_shmat").return ?
{
	name = "shmat"
	retstr = returnstr(1)
}

# shmctl _____________________________________________________
#
# long sys_shmctl (int shmid,
#		 int cmd,
#		 struct shmid_ds __user *buf)
#
probe nd_syscall.shmctl = kprobe.function("sys_shmctl") ?
{
#%( arch == "powerpc" || arch == "s390" %?
	@__syscall_gate_compat_simple
#%)
	name = "shmctl"
	asmlinkage()
	shmid = int_arg(1)
	cmd = int_arg(2)
	cmd_str = _semctl_cmd(cmd)
	buf_uaddr = pointer_arg(3)
	argstr = sprintf("%d, %s, %p", shmid, _semctl_cmd(cmd), buf_uaddr)
}
probe nd_syscall.shmctl.return = kprobe.function("sys_shmctl").return ?
{
#%( arch == "powerpc" || arch == "s390" %?
	@__syscall_gate_compat_simple
#%)
	name = "shmctl"
	retstr = returnstr(1)
}

# compat_sys_shmctl ________________________________________
#
# long compat_sys_shmctl(int first, int second, void __user *uptr)
# COMPAT_SYSCALL_DEFINE6(ipc, u32, call, int, first, int, second,
#	u32, third, compat_uptr_t, ptr, u32, fifth)
#
probe nd_syscall.compat_sys_shmctl = __nd_syscall.compat_shmctl ?,
	__nd_syscall.compat_ipc.shmctl ?
{
	name = "shmctl"
	cmd_str = _semctl_cmd(cmd)
	argstr = sprintf("%d, %s, %p", shmid, cmd_str, buf_uaddr)
}
probe __nd_syscall.compat_shmctl = kprobe.function("compat_sys_shmctl") ?
{
	@__compat_syscall_gate(@const("__NR_compat_shmctl"))
%( systemtap_v <= "2.5" %?
	first = int_arg(1)
	second = int_arg(2)
	uptr_uaddr = pointer_arg(3)
%)
	shmid = int_arg(1)
	cmd = int_arg(2)
	buf_uaddr = pointer_arg(3)
}
probe __nd_syscall.compat_ipc.shmctl = kprobe.function("compat_sys_ipc") ?,
	kprobe.function("sys32_ipc") ?
{
	if (int_arg(1) != @const("SHMCTL")) next;
%( systemtap_v <= "2.5" %?
	first = int_arg(2)
	second = int_arg(3)
	uptr_uaddr = pointer_arg(5)
%)
	shmid = int_arg(2)
	cmd = int_arg(3)
	buf_uaddr = pointer_arg(5)
}
probe nd_syscall.compat_sys_shmctl.return =
	kprobe.function("compat_sys_shmctl").return ?,
	__nd_syscall.compat_ipc.shmctl.return ?
{
	name = "compat_sys_shmctl"
	retstr = returnstr(1)
}
probe __nd_syscall.compat_ipc.shmctl.return =
	kprobe.function("compat_sys_ipc").return ?,
	kprobe.function("sys32_ipc").return ?
{
	if (@entry(int_arg(1)) != @const("SHMCTL")) next;
}

# shmdt ______________________________________________________
#
# long sys_shmdt(char __user *shmaddr)
#
probe nd_syscall.shmdt = kprobe.function("sys_shmdt") ?
{
	name = "shmdt"
	asmlinkage()
	shmaddr_uaddr = pointer_arg(1)
	argstr = sprintf("%p", shmaddr_uaddr)
}
probe nd_syscall.shmdt.return = kprobe.function("sys_shmdt").return ?
{
	name = "shmdt"
	retstr = returnstr(1)
}

# shmget _____________________________________________________
#
# long sys_shmget (key_t key,
#		 size_t size,
#		 int shmflg)
#
probe nd_syscall.shmget = kprobe.function("sys_shmget") ?
{
	name = "shmget"
	asmlinkage()
	key = int_arg(1)
	size = ulong_arg(2)
	shmflg = int_arg(3)
	shmflg_str = _stp_shmget_flags_str(shmflg)
	argstr = sprintf("%d, %u, %s", key, size, shmflg_str)
}
probe nd_syscall.shmget.return = kprobe.function("sys_shmget").return ?
{
	name = "shmget"
	retstr = returnstr(1)
}

# shutdown ___________________________________________________
#
# long sys_shutdown(int fd, int how)
#
probe nd_syscall.shutdown = __nd_syscall.shutdown ?,
	__nd_syscall.socketcall.shutdown ?,
	__nd_syscall.compat_socketcall.shutdown ?
{
	name = "shutdown"
	how_str = _shutdown_how_str(how)
	argstr = sprintf("%d, %s", s, how_str)
}
probe __nd_syscall.shutdown = kprobe.function("sys_shutdown") ?
{
	@__syscall_gate(@const("__NR_shutdown"))
	asmlinkage()
	s = int_arg(1)
	how = int_arg(2)
}
probe __nd_syscall.socketcall.shutdown = kprobe.function("sys_socketcall").call ?
{
	asmlinkage()
	if (int_arg(1) != @const("SYS_SHUTDOWN")) next;
	__args = &@cast(pointer_arg(2), "ulong", "kernel<linux/types.h>")
	s = __int32(user_ulong(&(__args)[0]))
	how = __int32(user_ulong(&(__args)[1]))
}
probe __nd_syscall.compat_socketcall.shutdown =
	kprobe.function("compat_sys_socketcall").call ?
{
	asmlinkage()
	if (int_arg(1) != @const("SYS_SHUTDOWN")) next;
	__args = &@cast(pointer_arg(2), "unsigned int", "kernel<linux/types.h>")
	s = user_int(&(__args)[0])
	how = user_int(&(__args)[1])
}
probe nd_syscall.shutdown.return = __nd_syscall.shutdown.return ?,
	__nd_syscall.socketcall.shutdown.return ?
{
	name = "shutdown"
	retstr = returnstr(1)
}
probe __nd_syscall.shutdown.return = kprobe.function("sys_shutdown").return ?
{
	@__syscall_gate(@const("__NR_shutdown"))
}
probe __nd_syscall.socketcall.shutdown.return = 
	kprobe.function("sys_socketcall").return ?,
	kprobe.function("compat_sys_socketcall").return ?
{
	if (@entry(__asmlinkage_int_arg(1)) != @const("SYS_SHUTDOWN")) next;
}

# sigaction __________________________________________________
# sys_sigaction(int sig, const struct old_sigaction __user *act, struct old_sigaction __user *oact)
# sys32_sigaction(int sig, struct old_sigaction32 __user *act, struct old_sigaction32 __user *oact)
#
probe nd_syscall.sigaction = kprobe.function("sys_sigaction") ?
{
	name = "sigaction"
	%( arch != "powerpc" %? asmlinkage() %)
	sig = int_arg(1)
	act_uaddr = pointer_arg(2)
	oact_uaddr = pointer_arg(3)
	argstr = sprintf("%s, {%s}, %p", _signal_name(sig), _struct_sigaction_u(act_uaddr), oact_uaddr)
}
probe nd_syscall.sigaction.return = kprobe.function("sys_sigaction").return ?
{
	name = "sigaction"
	retstr = returnstr(1)
}
probe nd_syscall.sigaction32 = kprobe.function("sys32_sigaction") ?,
                               kprobe.function("compat_sys_sigaction") ?
{
	name = "sigaction"
	asmlinkage()
	sig = int_arg(1)
	act_uaddr = pointer_arg(2)
	oact_uaddr = pointer_arg(3)
	argstr = sprintf("%s, {%s}, %p", _signal_name(sig), _struct_old_sigaction32_u(act_uaddr), oact_uaddr)
}
probe nd_syscall.sigaction32.return = kprobe.function("sys32_sigaction").return ?,
                                      kprobe.function("compat_sys_sigaction").return ?
{
	name = "sigaction"
	retstr = returnstr(1)
}

# In kernel 3.8, CONFIG_GENERIC_SIGALTSTACK was added by 
# kernel commit 6bf9adfc90370b695cb111116e15fdc0e1906270.
#
# Then, in kernel 3.9, all architectures were switched to using the
# generic sigaltstack by kernel commit
# d64008a8f30e0b381b292788ec6f3ee509b3bb40, which also removed the
# CONFIG_GENERIC_SIGALTSTACK config variable.
#
# Thus the following preprocessor test.
%( CONFIG_GENERIC_SIGALTSTACK == "y" || kernel_v >= "3.9" %?

# sigaltstack ________________________________________________
# SYSCALL_DEFINE2(sigaltstack,const stack_t __user *,uss, stack_t __user *,uoss)
#
probe nd_syscall.sigaltstack = kprobe.function("sys_sigaltstack"),
	kprobe.function("compat_sys_sigaltstack") ?
{
	name = "sigaltstack"
	asmlinkage()
	uss_uaddr = pointer_arg(1)
	uoss_uaddr = pointer_arg(2)
	argstr = sprintf("%s, %p",
			 (@__compat_task ? _stp_compat_sigaltstack_u(uss_uaddr)
			  : _stp_sigaltstack_u(uss_uaddr)), uoss_uaddr)
}
probe nd_syscall.sigaltstack.return = kprobe.function("sys_sigaltstack").return,
	kprobe.function("compat_sys_sigaltstack").return ?
{
	name = "sigaltstack"
	retstr = returnstr(1)
}
%)

# signal _____________________________________________________
# unsigned long sys_signal(int sig, __sighandler_t handler)
#
probe nd_syscall.signal = kprobe.function("sys_signal") ?
{
	name = "signal"
	asmlinkage()
	sig = int_arg(1)
	handler =  pointer_arg(2)
	argstr = sprintf("%s, %s", _signal_name(sig), _sighandler_str(handler))
}
probe nd_syscall.signal.return = kprobe.function("sys_signal").return ?
{
	name = "signal"
	retstr = returnstr(1)
}

# signalfd _____________________________________________________
#
# long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask)
# long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask,
#		 int flags)
# long compat_sys_signalfd(int ufd, const compat_sigset_t __user *sigmask,
# 		 compat_size_t sigsetsize)
# long compat_sys_signalfd4(int ufd, const compat_sigset_t __user *sigmask,
#		 compat_size_t sigsetsize, int flags)
#
probe nd_syscall.signalfd = __nd_syscall.signalfd4 !,
                            __nd_syscall.signalfd ?
{
}
probe __nd_syscall.signalfd4 = kprobe.function("sys_signalfd4")
{
	@__syscall_gate(@const("__NR_signalfd4"))
	asmlinkage()
	flags = int_arg(4)
	if (flags == 0) {
		name = "signalfd"
		argstr = sprintf("%d, %p, %d", int_arg(1), pointer_arg(2),
				 ulong_arg(3))
	} else {
		name = "signalfd4"
		argstr = sprintf("%d, %p, %d, %s", int_arg(1), pointer_arg(2),
		       	 	 ulong_arg(3), _signalfd4_flags_str(flags))
	}
}
probe __nd_syscall.signalfd = kprobe.function("sys_signalfd")
{
	@__syscall_gate(@const("__NR_signalfd"))
	name = "signalfd"
	asmlinkage()
	flags = 0
	argstr = sprintf("%d, %p, %d", int_arg(1), pointer_arg(2),
			 ulong_arg(3))
}
probe nd_syscall.signalfd.return = __nd_syscall.signalfd4.return !,
                                   __nd_syscall.signalfd.return ?
{
	retstr = returnstr(1)
}
probe __nd_syscall.signalfd4.return = kprobe.function("sys_signalfd4").return
{
	@__syscall_gate(@const("__NR_signalfd4"))
	flags = @entry(__asmlinkage_int_arg(4))
	name = (flags == 0) ? "signalfd" : "signalfd4"
}
probe __nd_syscall.signalfd.return = kprobe.function("sys_signalfd").return
{
	@__syscall_gate(@const("__NR_signalfd"))
	flags = 0
	name = "signalfd"
}
probe nd_syscall.compat_signalfd = __nd_syscall.compat_signalfd4 !,
                                   __nd_syscall.compat_signalfd ?
{
}
probe __nd_syscall.compat_signalfd4 = kprobe.function("compat_sys_signalfd4")
{
	asmlinkage()
	flags = int_arg(4)
	if (flags == 0) {
		name = "signalfd"
		argstr = sprintf("%d, %p, %d", int_arg(1), pointer_arg(2),
				 u32_arg(3))
	} else {
		name = "signalfd4"
		argstr = sprintf("%d, %p, %d, %s", int_arg(1),
				 pointer_arg(2), u32_arg(3),
				 _signalfd4_flags_str(flags))
	}
}
probe __nd_syscall.compat_signalfd = kprobe.function("compat_sys_signalfd")
{
	asmlinkage()
	flags = 0
	name = "signalfd"
	argstr = sprintf("%d, %p, %d", int_arg(1), pointer_arg(2),
			 u32_arg(3))
}
probe nd_syscall.compat_signalfd.return =
		__nd_syscall.compat_signalfd4.return !,
		__nd_syscall.compat_signalfd.return ?
{
}
probe __nd_syscall.compat_signalfd4.return =
		kprobe.function("compat_sys_signalfd4").return
{
	flags = @entry(__asmlinkage_int_arg(4))
	name = (flags == 0) ? "signalfd" : "signalfd4"
	retstr = returnstr(1)
}
probe __nd_syscall.compat_signalfd.return =
		kprobe.function("compat_sys_signalfd").return
{
	flags = 0
	name = "signalfd"
	retstr = returnstr(1)
}

# sigpending _________________________________________________
# SYSCALL_DEFINE1(sigpending, old_sigset_t __user *, set)
# COMPAT_SYSCALL_DEFINE1(sigpending, compat_old_sigset_t __user *, set)
#
probe nd_syscall.sigpending = __nd_syscall.sigpending ?,
	kprobe.function("compat_sys_sigpending") ?
{
	name = "sigpending"
	asmlinkage()
	argstr = sprintf("%p", pointer_arg(1))
}
probe __nd_syscall.sigpending = kprobe.function("sys_sigpending") ?
{
	@__syscall_gate_compat_simple
}
probe nd_syscall.sigpending.return = __nd_syscall.sigpending.return ?,
	kprobe.function("compat_sys_sigpending").return ?
{
	name = "sigpending"
	retstr = returnstr(1)
}
probe __nd_syscall.sigpending.return =
	kprobe.function("sys_sigpending").return ?
{
	@__syscall_gate_compat_simple
}

# sigprocmask ________________________________________________
# long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset)
# asmlinkage long compat_sys_sigprocmask(int how,
# 				         compat_old_sigset_t __user *nset,
#				         compat_old_sigset_t __user *oset)
#
#
probe nd_syscall.sigprocmask = __nd_syscall.sigprocmask ?,
			       kprobe.function("compat_sys_sigprocmask") ?
{
	name = "sigprocmask"
	asmlinkage()
	how  = int_arg(1)
	how_str = _sigprocmask_how_str(how)
	set_uaddr    = pointer_arg(2)
	oldset_uaddr = pointer_arg(3)
	argstr = sprintf("%s, %p, %p", how_str, set_uaddr, oldset_uaddr)
}
probe __nd_syscall.sigprocmask = kprobe.function("sys_sigprocmask") ?
{
	@__syscall_gate(@const("__NR_sigprocmask"))
}
probe nd_syscall.sigprocmask.return = __nd_syscall.sigprocmask.return ?,
	kprobe.function("compat_sys_sigprocmask").return ?
{
	name = "sigprocmask"
	retstr = returnstr(1)
}
probe __nd_syscall.sigprocmask.return =
	kprobe.function("sys_sigprocmask").return ?
{
	@__syscall_gate(@const("__NR_sigprocmask"))
}

# sigreturn __________________________________________________
# int sys_sigreturn(unsigned long __unused)
#
probe nd_syscall.sigreturn = kprobe.function("sys_sigreturn") ?,
                             kprobe.function("sys32_sigreturn") ?
{
	name = "sigreturn"
	argstr = ""
}
probe nd_syscall.sigreturn.return = kprobe.function("sys_sigreturn").return ?,
                                    kprobe.function("sys32_sigreturn").return ?
{
	name = "sigreturn"
	retstr = returnstr(1)
}

# sigsuspend _________________________________________________
# #ifdef CONFIG_OLD_SIGSUSPEND
# SYSCALL_DEFINE1(sigsuspend, old_sigset_t, mask)
# #endif
# #ifdef CONFIG_OLD_SIGSUSPEND3
# SYSCALL_DEFINE3(sigsuspend, int, unused1, int, unused2, old_sigset_t, mask)
# #endif
# asmlinkage long
# sys32_sigsuspend(int history0, int history1, old_sigset_t mask)
# long compat_sys_sigsuspend(old_sigset_t mask)
probe nd_syscall.sigsuspend = __nd_syscall.sisguspend ?,
	__nd_syscall.compat_sys_sigsuspsend ?
{
	name = "sigsuspend"
	argstr = sprintf("%s", _stp_sigmask_str(mask))
}
probe __nd_syscall.sisguspend = kprobe.function("sys_sigsuspend") ?,
	kprobe.function("sys32_sigsuspend") ?
{
	asmlinkage()
%( CONFIG_OLD_SIGSUSPEND == "y" %?
	mask = ulong_arg(1)
%:
	# Both CONFIG_OLD_SIGSUSPEND3 and sys32_sigsuspend have mask
	# as the 3rd argument.
	mask = ulong_arg(3)
%)
}
probe __nd_syscall.compat_sys_sigsuspsend = 
	kprobe.function("compat_sys_sigsuspend") ?
{
	asmlinkage()
	mask = ulong_arg(1)
}
probe nd_syscall.sigsuspend.return =
	kprobe.function("sys_sigsuspend").return ?,
	kprobe.function("sys32_sigsuspend").return ?,
	kprobe.function("compat_sys_sigsuspend").return ?
{
	name = "sigsuspend"
	retstr = returnstr(1)
}

# socket _____________________________________________________
# long sys_socket(int family, int type, int protocol)
#
probe nd_syscall.socket = __nd_syscall.socket ?,
	__nd_syscall.socketcall.socket ?, __nd_syscall.compat_socketcall.socket ?
{
	name = "socket"
	argstr = sprintf("%s, %s, %s", _sock_family_str(family),
			 _sock_type_str(type),
			 _sock_protocol_str(family, protocol))
}
probe __nd_syscall.socket = kprobe.function("sys_socket") ?
{
	@__syscall_gate(@const("__NR_socket"))
	asmlinkage()
	family = int_arg(1)
	type = int_arg(2)
	protocol = int_arg(3)
}
probe __nd_syscall.socketcall.socket = kprobe.function("sys_socketcall").call ?
{
	asmlinkage()
	if (int_arg(1) != @const("SYS_SOCKET")) next;
	__args = &@cast(pointer_arg(2), "ulong", "kernel<linux/types.h>")
	family = __int32(user_ulong(&(__args)[0]))
	type = __int32(user_ulong(&(__args)[1]))
	protocol = __int32(user_ulong(&(__args)[2]))
}
probe __nd_syscall.compat_socketcall.socket =
	kprobe.function("compat_sys_socketcall").call ?
{
	asmlinkage()
	if (int_arg(1) != @const("SYS_SOCKET")) next;
	__args = &@cast(pointer_arg(2), "unsigned int", "kernel<linux/types.h>")
	family = user_int(&(__args)[0])
	type = user_int(&(__args)[1])
	protocol = user_int(&(__args)[2])
}
probe nd_syscall.socket.return = __nd_syscall.socket.return ?,
	__nd_syscall.socketcall.socket.return ?
{
	name = "socket"
	retstr = returnstr(1)
}
probe __nd_syscall.socket.return = kprobe.function("sys_socket").return ?
{
	@__syscall_gate(@const("__NR_socket"))
}
probe __nd_syscall.socketcall.socket.return = 
	kprobe.function("sys_socketcall").return ?,
	kprobe.function("compat_sys_socketcall").return ?
{
	if (@entry(__asmlinkage_int_arg(1)) != @const("SYS_SOCKET")) next;
}

# commented out because this seems redundant
# socketcall _________________________________________________
#
# long sys_socketcall(int call, unsigned long __user *args)
#
#probe nd_syscall.socketcall = kprobe.function("sys_socketcall") ?
#{
#	name = "socketcall"
#	call = $call
#	args_uaddr = $args
#	argstr = sprintf("%d, %p", $call, args_uaddr)
#}
#probe nd_syscall.socketcall.return = kprobe.function("sys_socketcall").return ?
#{
#	name = "socketcall"
#	retstr = returnstr(1)
#}

# socketpair _________________________________________________
# long sys_socketpair(int family,
#		    int type,
#		    int protocol,
#		    int __user *usockvec)
#
probe nd_syscall.socketpair = __nd_syscall.socketpair ?,
	__nd_syscall.socketcall.socketpair ?,
	__nd_syscall.compat_socketcall.socketpair ?
{
	name = "socketpair"
	asmlinkage()
	argstr = sprintf("%s, %s, %s, %p", _sock_family_str(family),
			 _sock_type_str(type),
			 _sock_protocol_str(family, protocol), sv_uaddr)
}
probe __nd_syscall.socketpair = kprobe.function("sys_socketpair") ?
{
	@__syscall_gate(@const("__NR_socketpair"))
	asmlinkage()
	family = int_arg(1)
	type = int_arg(2)
	protocol = int_arg(3)
	sv_uaddr = pointer_arg(4)
}
probe __nd_syscall.socketcall.socketpair =
	kprobe.function("sys_socketcall").call ?
{
	asmlinkage()
	if (int_arg(1) != @const("SYS_SOCKETPAIR")) next;
	__args = &@cast(pointer_arg(2), "ulong", "kernel<linux/types.h>")
	family = __int32(user_ulong(&(__args)[0]))
	type = __int32(user_ulong(&(__args)[1]))
	protocol = __int32(user_ulong(&(__args)[2]))
	sv_uaddr = user_ulong(&(__args)[3])
}
probe __nd_syscall.compat_socketcall.socketpair =
	kprobe.function("compat_sys_socketcall").call ?
{
	asmlinkage()
	if (int_arg(1) != @const("SYS_SOCKETPAIR")) next;
	__args = &@cast(pointer_arg(2), "unsigned int", "kernel<linux/types.h>")
	family = user_int(&(__args)[0])
	type = user_int(&(__args)[1])
	protocol = user_int(&(__args)[2])
	sv_uaddr = user_uint32(&(__args)[3])
}
probe nd_syscall.socketpair.return = __nd_syscall.socketpair.return ?,
	__nd_syscall.socketcall.socketpair.return ?
{
	name = "socketpair"
	retstr = returnstr(1)
}
probe __nd_syscall.socketpair.return = kprobe.function("sys_socketpair").return ?
{
	@__syscall_gate(@const("__NR_socketpair"))
}
probe __nd_syscall.socketcall.socketpair.return = 
	kprobe.function("sys_socketcall").return ?,
	kprobe.function("compat_sys_socketcall").return ?
{
	if (@entry(__asmlinkage_int_arg(1)) != @const("SYS_SOCKETPAIR")) next;
}

# splice ___________________________________________________
#
# long sys_splice(int fd_in, loff_t __user *off_in,
#		   int fd_out, loff_t __user *off_out,
#		   size_t len, unsigned int flags)
#
probe nd_syscall.splice = kprobe.function("sys_splice") ?
{
	name = "splice"
	asmlinkage()
	fd_in = int_arg(1)
	off_in = pointer_arg(2)
	fd_out = int_arg(3)
	off_out = pointer_arg(4)
	len = ulong_arg(5)
	flags = uint_arg(6)
	flags_str = (_stp_splice_flags_str(flags))
	argstr = sprintf("%d, %p, %d, %p, %u, %s", fd_in, off_in, fd_out,
	                 off_out, len, flags_str);
}
probe nd_syscall.splice.return = kprobe.function("sys_splice").return ?
{
	name = "splice"
	retstr = returnstr(1)
}

# ssetmask ___________________________________________________
#
# long sys_ssetmask(int newmask)
#
probe nd_syscall.ssetmask = kprobe.function("sys_ssetmask") ?
{
	name = "ssetmask"
	asmlinkage()
	newmask = int_arg(1)
	newmask_str = _stp_sigmask_str(newmask)
	argstr = _stp_sigmask_str(newmask)
}
probe nd_syscall.ssetmask.return = kprobe.function("sys_ssetmask").return ?
{
	name = "ssetmask"
	retstr = returnstr(1)
}

# stat _______________________________________________________
# long sys_stat(char __user * filename, struct __old_stat __user * statbuf)
# long sys32_stat64(char __user * filename, struct stat64 __user *statbuf)
# long sys_stat64(char __user * filename, struct stat64 __user * statbuf)
# long sys_oabi_stat64(char __user * filename, struct oldabi_stat64 __user * statbuf)
# long compat_sys_newstat(char __user * filename, struct compat_stat __user *statbuf)
probe nd_syscall.stat = kprobe.function("sys_stat") ?,
                        kprobe.function("sys_newstat") ?,
                        kprobe.function("sys32_stat64") ?,
                        kprobe.function("sys_stat64") ?,
                        kprobe.function("sys_oabi_stat64") ?,
                        kprobe.function("compat_sys_newstat") ?
{
	name = "stat"
	asmlinkage()
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	buf_uaddr = pointer_arg(2)
	argstr = sprintf("%s, %p", user_string_quoted(filename_uaddr), buf_uaddr)
}
probe nd_syscall.stat.return = kprobe.function("sys_stat").return ?,
                               kprobe.function("sys_newstat").return ?,
                               kprobe.function("sys32_stat64").return ?,
                               kprobe.function("sys_stat64").return ?,
                               kprobe.function("sys_oabi_stat64").return ?,
                               kprobe.function("compat_sys_newstat").return ?
{
	name = "stat"
	retstr = returnstr(1)
}

# statfs _____________________________________________________
# long sys_statfs(const char __user * path, struct statfs __user * buf)
# long compat_sys_statfs(const char __user *path, struct compat_statfs __user *buf)
#
probe nd_syscall.statfs = kprobe.function("compat_sys_statfs") ?,
                          kprobe.function("sys_statfs") ?
{
	name = "statfs"
	asmlinkage()
	path = user_string_quoted(pointer_arg(1))
	buf_uaddr = pointer_arg(2)
	argstr = sprintf("%s, %p", user_string_quoted(pointer_arg(1)), buf_uaddr)
}
probe nd_syscall.statfs.return = kprobe.function("compat_sys_statfs").return ?,
                                 kprobe.function("sys_statfs").return ?
{
	name = "statfs"
	retstr = returnstr(1)
}

# statfs64 ___________________________________________________
#
# long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf)
# long compat_sys_statfs64(const char __user *path, compat_size_t sz, struct compat_statfs64 __user *buf)
#
probe nd_syscall.statfs64 = kprobe.function("sys_statfs64") ?,
	kprobe.function("compat_sys_statfs64") ?
{
	name = "statfs64"
	asmlinkage()
	path = user_string_quoted(pointer_arg(1))
	sz = ulong_arg(2)
	buf_uaddr = pointer_arg(3)
	argstr = sprintf("%s, %u, %p", path, sz, buf_uaddr)
}
probe nd_syscall.statfs64.return =
	kprobe.function("sys_statfs64").return ?,
	kprobe.function("compat_sys_statfs64").return ?
{
	name = "statfs64"
	retstr = returnstr(1)
}

# stime ______________________________________________________
#
# long sys_stime(time_t __user *tptr)
# long compat_sys_stime(compat_time_t __user *tptr)
#
probe nd_syscall.stime = kprobe.function("compat_sys_stime") ?,
                         kprobe.function("sys_stime") ?
{
	name = "stime"
	/* FIXME. Decode time */
	asmlinkage()
	t_uaddr = pointer_arg(1)
	argstr = sprintf("%p", t_uaddr)
}
probe nd_syscall.stime.return = kprobe.function("compat_sys_stime").return ?,
                                kprobe.function("sys_stime").return ?
{
	name = "stime"
	retstr = returnstr(1)
}

# swapoff ____________________________________________________
#
# asmlinkage long
# sys_swapoff(const char __user * specialfile)
#
probe nd_syscall.swapoff = kprobe.function("sys_swapoff") ?
{
	name = "swapoff"
	asmlinkage()
	path = user_string_quoted(pointer_arg(1))
	argstr = user_string_quoted(pointer_arg(1))
}
probe nd_syscall.swapoff.return = kprobe.function("sys_swapoff").return ?
{
	name = "swapoff"
	retstr = returnstr(1)
}

# swapon _____________________________________________________
#
# asmlinkage long
# sys_swapon(const char __user * specialfile,
#		int swap_flags)
#
probe nd_syscall.swapon = kprobe.function("sys_swapon") ?
{
	name = "swapon"
	asmlinkage()
	path = user_string_quoted(pointer_arg(1))
	swapflags = int_arg(2)
	swapflags_str = _swapon_flags_str(swapflags)
	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
			 swapflags_str)
}
probe nd_syscall.swapon.return = kprobe.function("sys_swapon").return ?
{
	name = "swapon"
	retstr = returnstr(1)
}

# symlink ____________________________________________________
# long sys_symlink(const char __user * oldname,
#		 const char __user * newname)
probe nd_syscall.symlink = kprobe.function("sys_symlink") ?
{
	name = "symlink"
	asmlinkage()
	oldpath = user_string_quoted(pointer_arg(1))
	newpath = user_string_quoted(pointer_arg(2))
	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
			user_string_quoted(pointer_arg(2)))
}
probe nd_syscall.symlink.return = kprobe.function("sys_symlink").return ?
{
	name = "symlink"
	retstr = returnstr(1)
}

# symlinkat __________________________________________________
# new function with 2.6.16
# long sys_symlinkat(const char __user *oldname, int newdfd,
#	const char __user *newname)
probe nd_syscall.symlinkat = kprobe.function("sys_symlinkat") ?
{
	@__syscall_compat_gate(@const("__NR_symlinkat"),
			       @const("__NR_compat_symlinkat"))
	name = "symlinkat"
	asmlinkage()
	oldname = pointer_arg(1)
	oldname_str = user_string_quoted(oldname)
	newdfd = int_arg(2)
	newdfd_str = _dfd_str(newdfd)
	newname = pointer_arg(3)
	newname_str = user_string_quoted(newname)
	argstr = sprintf("%s, %s, %s", user_string_quoted(oldname),
		newdfd_str, user_string_quoted(newname))
}
probe nd_syscall.symlinkat.return = kprobe.function("sys_symlinkat").return ?
{
	@__syscall_compat_gate(@const("__NR_symlinkat"),
			       @const("__NR_compat_symlinkat"))
	name = "symlinkat"
	retstr = returnstr(1)
}

# sync _______________________________________________________
#
# sys_sync(void)
#
probe nd_syscall.sync = kprobe.function("sys_sync")
{
	name = "sync"
	argstr = ""
}
probe nd_syscall.sync.return = kprobe.function("sys_sync").return
{
	name = "sync"
	retstr = returnstr(1)
}

# sync_file_range ____________________________________________
#
# Why is there a 'sync_file_range' and a 'sync_file_range2'? As the
# man page says:
#
#   Some architectures (e.g., PowerPC, ARM) need 64-bit arguments to be
#   aligned in a suitable pair of registers. On such architectures, the
#   call signature of sync_file_range()... would force a register to be
#   be wasted as padding between the 'fd' and 'offset' arguments.
#
# SYSCALL_DEFINE4(sync_file_range, int, fd, loff_t, offset, loff_t, nbytes,
#				unsigned int, flags)
# SYSCALL_DEFINE4(sync_file_range2, int, fd, unsigned int, flags,
#				 loff_t, offset, loff_t, nbytes)
#
# But, sync_file_range2() is just a wrapper around sync_file_range, so
# we can just probe that.
probe nd_syscall.sync_file_range = kprobe.function("sys_sync_file_range") ?
{
	asmlinkage()
	name = "sync_file_range"
	fd = int_arg(1)
%( CONFIG_64BIT == "y" %?
	offset = longlong_arg(2)
	nbytes = longlong_arg(3)
	flags = uint_arg(4)
%:
%( arch == "arm" %?
	# arm has some odd rules regarding long long arguments.
	offset = longlong_arg(3)
	nbytes = longlong_arg(5)
	flags = uint_arg(7)
%:
	offset = longlong_arg(2)
	nbytes = longlong_arg(4)
	flags = uint_arg(6)
%)
%)
	flags_str = _sync_file_range_flags_str(flags)
	argstr = sprintf("%d, %d, %d, %s", fd, offset, nbytes,
			 _sync_file_range_flags_str(flags))
}
probe nd_syscall.sync_file_range.return =
	kprobe.function("sys_sync_file_range").return ?
{
	name = "sync_file_range"
	retstr = returnstr(1)
}

# syncfs _____________________________________________________
#
# SYSCALL_DEFINE1(syncfs, int, fd)
probe nd_syscall.syncfs = kprobe.function("sys_syncfs") ?
{
	asmlinkage()
	name = "syncfs"
	fd = int_arg(1)
	argstr = sprintf("%d", fd)
}
probe nd_syscall.syncfs.return = kprobe.function("sys_syncfs").return ?
{
	name = "syncfs"
	retstr = returnstr(1)
}

# sysctl _____________________________________________________
#
# long sys_sysctl(struct __sysctl_args __user *args)
#
probe nd_syscall.sysctl = kprobe.function("compat_sys_sysctl") ?,
                          kprobe.function("sys_sysctl") ?
{
	name = "sysctl"
	asmlinkage()
	argstr = sprintf("%p", pointer_arg(1))
}
probe nd_syscall.sysctl.return = kprobe.function("compat_sys_sysctl").return ?,
                                 kprobe.function("sys_sysctl").return ?
{
	name = "sysctl"
	retstr = returnstr(1)
}

# sysfs ______________________________________________________
#
# asmlinkage long
# sys_sysfs(int option,
#	     unsigned long arg1,
#	     unsigned long arg2)
#
probe nd_syscall.sysfs = kprobe.function("sys_sysfs") ?
{
	name = "sysfs"
	asmlinkage()
	option = int_arg(1)
	arg1 = ulong_arg(2)
	arg2 = ulong_arg(3)
	if (option == 1)
		argstr = sprintf("%d, %s", option, user_string_quoted(arg1))
	else if (option == 2)
		argstr = sprintf("%d, %d, %p", option, arg1, arg2)
	else if (option == 3)
		argstr = sprintf("%d", option)
	else
		argstr = sprintf("%d, 0x%x, 0x%x", option, arg1, arg2)
}
probe nd_syscall.sysfs.return = kprobe.function("sys_sysfs").return ?
{
	name = "sysfs"
	retstr = returnstr(1)
}

# sysinfo ____________________________________________________
#
# long sys_sysinfo(struct sysinfo __user *info)
# long compat_sys_sysinfo(struct compat_sysinfo __user *info)
probe nd_syscall.sysinfo = kprobe.function("compat_sys_sysinfo") ?,
                           kprobe.function("sys_sysinfo") ?
{
	name = "sysinfo"
	asmlinkage()
	info_uaddr = pointer_arg(1)
	argstr = sprintf("%s", _struct_sysinfo_u(info_uaddr))
}
probe nd_syscall.sysinfo.return = kprobe.function("compat_sys_sysinfo").return ?,
                                  kprobe.function("sys_sysinfo").return ?
{
	name = "sysinfo"
	retstr = returnstr(1)
}

# syslog _____________________________________________________
#
# long sys_syslog(int type, char __user * buf, int len)
#
probe nd_syscall.syslog = kprobe.function("sys_syslog") ?
{
	name = "syslog"
	asmlinkage()
	type = int_arg(1)
	bufp_uaddr = pointer_arg(2)
	len = int_arg(3)
	argstr = sprintf("%d, %p, %d", type, bufp_uaddr, len)
}
probe nd_syscall.syslog.return = kprobe.function("sys_syslog").return ?
{
	name = "syslog"
	retstr = returnstr(1)
}

# tee _____________________________________________________
#
# long sys_tee(int fdin, int fdout, size_t len, unsigned int flags)
#
probe nd_syscall.tee = kprobe.function("sys_tee") ?
{
	name = "tee"
	asmlinkage()
	fdin = int_arg(1)
	fdout = int_arg(2)
	len = ulong_arg(3)
	flags = uint_arg(4)
	argstr = sprintf("%d, %d, %u, 0x%x", fdin, fdout, len, flags)
}
probe nd_syscall.tee.return = kprobe.function("sys_tee").return ?
{
	name = "tee"
	retstr = returnstr(1)
}

# tgkill _____________________________________________________
#
# asmlinkage long
# sys_tgkill(int tgid,
#		int pid,
#		int sig)
#
probe nd_syscall.tgkill = kprobe.function("sys_tgkill") ?
{
	name = "tgkill"
	asmlinkage()
	tgid = int_arg(1)
	pid = int_arg(2)
	sig = int_arg(3)
	argstr = sprintf("%d, %d, %s", tgid, pid, _signal_name(sig))
}
probe nd_syscall.tgkill.return = kprobe.function("sys_tgkill").return ?
{
	name = "tgkill"
	retstr = returnstr(1)
}

# time _______________________________________________________
#
# long sys_time(time_t __user * tloc)
# long sys_time64(long __user * tloc)
# long sys32_time(compat_time_t __user * tloc)
# long compat_sys_time(compat_time_t __user * tloc)
#
probe nd_syscall.time = kprobe.function("sys32_time") ?,
                        kprobe.function("sys_time64") ?,
                        kprobe.function("compat_sys_time") ?,
                        kprobe.function("sys_time") ?
{
	name = "time"
	asmlinkage()
	t_uaddr = pointer_arg(1)
	argstr = sprintf("%p", t_uaddr)
}
probe nd_syscall.time.return = kprobe.function("sys32_time").return ?,
                               kprobe.function("sys_time64").return ?,
                               kprobe.function("compat_sys_time").return ?,
                               kprobe.function("sys_time").return ?
{
	name = "time"
	retstr = returnstr(1)
}

# timer_create _______________________________________________
#
# long sys_timer_create(clockid_t which_clock,
#			struct sigevent __user *timer_event_spec,
#			timer_t __user * created_timer_id)
# long compat_sys_timer_create(clockid_t which_clock,
#			struct sigevent __user *timer_event_spec,
#			timer_t __user * created_timer_id)
#
probe nd_syscall.timer_create = __nd_syscall.timer_create,
                                __nd_syscall.compat_timer_create ?
{
	name = "timer_create"
}
probe __nd_syscall.timer_create = kprobe.function("sys_timer_create")
{
	@__syscall_gate(@const("__NR_timer_create"))
	asmlinkage()
	clockid = int_arg(1)
	clockid_str = _get_wc_str(clockid)
	evp_uaddr = pointer_arg(2)
	timerid_uaddr = pointer_arg(3)
	argstr = sprintf("%s, %p, %p", clockid_str, evp_uaddr, timerid_uaddr)
}
probe __nd_syscall.compat_timer_create = kprobe.function("compat_sys_timer_create") ?
{
	asmlinkage()
	clockid = int_arg(1)
	clockid_str = _get_wc_str(clockid)
	evp_uaddr = pointer_arg(2)
	timerid_uaddr = pointer_arg(3)
	argstr = sprintf("%s, %p, %p", clockid_str, evp_uaddr, timerid_uaddr)
}
probe nd_syscall.timer_create.return =
	__nd_syscall.timer_create.return,
	kprobe.function("compat_sys_timer_create").return ?
{
	name = "timer_create"
	retstr = returnstr(1)
}
probe __nd_syscall.timer_create.return = kprobe.function("sys_timer_create").return
{
	@__syscall_gate(@const("__NR_timer_create"))
}

# timer_delete _______________________________________________
#
# long sys_timer_delete(timer_t timer_id)
#
probe nd_syscall.timer_delete = kprobe.function("sys_timer_delete") ?
{
	name = "timer_delete"
	asmlinkage()
	timerid = int_arg(1)
	argstr = sprint(timerid)
}
probe nd_syscall.timer_delete.return = kprobe.function("sys_timer_delete").return ?
{
	name = "timer_delete"
	retstr = returnstr(1)
}

# timer_getoverrun ___________________________________________
#
# long sys_timer_getoverrun(timer_t timer_id)
#
probe nd_syscall.timer_getoverrun = kprobe.function("sys_timer_getoverrun") ?
{
	name = "timer_getoverrun"
	asmlinkage()
	timerid = int_arg(1)
	argstr = sprint(timerid)
}
probe nd_syscall.timer_getoverrun.return = kprobe.function("sys_timer_getoverrun").return ?
{
	name = "timer_getoverrun"
	retstr = returnstr(1)
}

# timer_gettime ______________________________________________
#
# long sys_timer_gettime(timer_t timer_id,
#			 struct itimerspec __user *setting)
# long compat_sys_timer_gettime(timer_t timer_id,
#			 struct itimerspec __user *setting)
#
probe nd_syscall.timer_gettime = __nd_syscall.timer_gettime,
	__nd_syscall.compat_timer_gettime ?
{
	name = "timer_gettime"
}

probe __nd_syscall.timer_gettime = kprobe.function("sys_timer_gettime")
{
	@__syscall_gate(@const("__NR_timer_gettime"))
	asmlinkage()
	timerid = int_arg(1)
	value_uaddr = pointer_arg(2)
	argstr = sprintf("%d, %p", timerid, value_uaddr)
}
probe __nd_syscall.compat_timer_gettime = kprobe.function("compat_sys_timer_gettime") ?
{
	asmlinkage()
	timerid = int_arg(1)
	value_uaddr = pointer_arg(2)
	argstr = sprintf("%d, %p", timerid, value_uaddr)
}
probe nd_syscall.timer_gettime.return =
	__nd_syscall.timer_gettime.return,
	kprobe.function("compat_sys_timer_gettime").return ?
{
	name = "timer_gettime"
	retstr = returnstr(1)
}
probe __nd_syscall.timer_gettime.return = kprobe.function("sys_timer_gettime").return
{
	@__syscall_gate(@const("__NR_timer_gettime"))
}

# timer_settime ______________________________________________
#
# long sys_timer_settime(timer_t timer_id,
#			 int flags,
#			 const struct itimerspec __user *new_setting,
#			 struct itimerspec __user *old_setting)
# long compat_sys_timer_settime(timer_t timer_id, int flags,
#			  struct compat_itimerspec __user *new,
#			  struct compat_itimerspec __user *old)
#
probe nd_syscall.timer_settime = __nd_syscall.timer_settime,
				 __nd_syscall.compat_timer_settime ?
{
	name = "timer_settime"
	asmlinkage()
}
probe __nd_syscall.timer_settime = kprobe.function("sys_timer_settime").call
{
	@__syscall_gate(@const("__NR_timer_settime"))
	asmlinkage()
	timerid = int_arg(1)
	flags = int_arg(2)
	value_uaddr  = pointer_arg(3)
	ovalue_uaddr = pointer_arg(4)

	argstr = sprintf("%d, %d, %s, %p", timerid, flags,
			 _struct_itimerspec_u(value_uaddr), ovalue_uaddr)
}
probe __nd_syscall.compat_timer_settime =
	kprobe.function("compat_sys_timer_settime").call ?
{
	asmlinkage()
	timerid = int_arg(1)
	flags = int_arg(2)
	value_uaddr  = pointer_arg(3)
	ovalue_uaddr = pointer_arg(4)
	argstr = sprintf("%d, %d, %s, %p", timerid, flags,
			 _struct_compat_itimerspec_u(value_uaddr), ovalue_uaddr)
}
probe nd_syscall.timer_settime.return =
	__nd_syscall.timer_settime.return,
	kprobe.function("compat_sys_timer_settime").return ?
{
	name = "timer_settime"
	retstr = returnstr(1)
}
probe __nd_syscall.timer_settime.return =
	kprobe.function("sys_timer_settime").return
{
	@__syscall_gate(@const("__NR_timer_settime"))
}

# timerfd ______________________________________________
#
# Note that timerfd() only existed between kernels 2.6.22 and 2.6.25
# and was replaced by timerfd_create(), timerfd_gettime(),
# and timerfd_settime().
#
# long sys_timerfd(int ufd, int clockid, int flags,
#	    const struct itimerspec __user *utmr)
# long compat_sys_timerfd(int ufd, int clockid, int flags,
#  	   const struct compat_itimerspec __user *utmr)
#
probe nd_syscall.timerfd = kprobe.function("sys_timerfd") ?,
                           kprobe.function("compat_sys_timerfd") ?
{
	name = "timerfd"
	asmlinkage()
	argstr = sprintf("%d, %d, 0x%x", int_arg(1), int_arg(2), int_arg(3))
}
probe nd_syscall.timerfd.return = kprobe.function("sys_timerfd").return ?,
                                  kprobe.function("compat_sys_timerfd").return ?
{
	name = "timerfd"
	retstr = returnstr(1)
}

# timerfd_create _____________________________________________
#
# SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags)
probe nd_syscall.timerfd_create = kprobe.function("sys_timerfd_create").call ?
{
	name = "timerfd_create"
	asmlinkage()
	clockid = int_arg(1)
	clockid_str = _get_wc_str(clockid)
	flags = int_arg(2)
	flags_str = _stp_timerfd_flags_str(flags)
	argstr = sprintf("%s, %s", clockid_str, flags_str)
}
probe nd_syscall.timerfd_create.return =
	kprobe.function("sys_timerfd_create").return ?
{
	name = "timerfd_create"
	retstr = returnstr(1)
}

# timerfd_gettime_____________________________________________
#
# SYSCALL_DEFINE2(timerfd_gettime, int, ufd, struct itimerspec __user *, otmr)
# COMPAT_SYSCALL_DEFINE2(timerfd_gettime, int, ufd,
#		struct compat_itimerspec __user *, otmr)
probe nd_syscall.timerfd_gettime = __nd_syscall.timerfd_gettime ?,
	kprobe.function("compat_sys_timerfd_gettime").call ?
{
	name = "timerfd_gettime"
	asmlinkage()
	fd = int_arg(1)
	value_uaddr = pointer_arg(2)
	argstr = sprintf("%d, %p", fd, value_uaddr)
}
probe __nd_syscall.timerfd_gettime =
	kprobe.function("sys_timerfd_gettime").call ?
{
	@__syscall_gate_compat_simple
}
probe nd_syscall.timerfd_gettime.return = __nd_syscall.timerfd_gettime.return ?,
	kprobe.function("compat_sys_timerfd_gettime").return ?
{
	name = "timerfd_gettime"
	retstr = returnstr(1)
}
probe __nd_syscall.timerfd_gettime.return =
	kprobe.function("sys_timerfd_gettime").return ?
{
	@__syscall_gate_compat_simple
}

# timerfd_settime ____________________________________________
#
# SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,
#		const struct itimerspec __user *, utmr,
#		struct itimerspec __user *, otmr)
# COMPAT_SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,
#		const struct compat_itimerspec __user *, utmr,
#		struct compat_itimerspec __user *, otmr)
probe nd_syscall.timerfd_settime = __nd_syscall.timerfd_settime ?,
	__nd_syscall.compat_timerfd_settime ?
{
	name = "timerfd_settime"
}
probe __nd_syscall.timerfd_settime =
	kprobe.function("sys_timerfd_settime").call ?
{
	@__syscall_gate_compat_simple
	asmlinkage()
	fd = int_arg(1)
	flags = int_arg(2)
	flags_str = _stp_timerfd_flags_str(flags)
	value_uaddr = pointer_arg(3)
	ovalue_uaddr = pointer_arg(4)
	argstr = sprintf("%d, %s, %s, %p", fd, flags_str,
			 _struct_itimerspec_u(value_uaddr), ovalue_uaddr)
}
probe __nd_syscall.compat_timerfd_settime =
	kprobe.function("compat_sys_timerfd_settime").call ?
{
	asmlinkage()
	fd = int_arg(1)
	flags = int_arg(2)
	flags_str = _stp_timerfd_flags_str(flags)
	value_uaddr = pointer_arg(3)
	ovalue_uaddr = pointer_arg(4)
	argstr = sprintf("%d, %s, %s, %p", fd, flags_str,
			 _struct_compat_itimerspec_u(value_uaddr),
			 ovalue_uaddr)
}
probe nd_syscall.timerfd_settime.return = __nd_syscall.timerfd_settime.return ?,
	kprobe.function("compat_sys_timerfd_settime").return ?
{
	name = "timerfd_settime"
	retstr = returnstr(1)
}
probe __nd_syscall.timerfd_settime.return =
	kprobe.function("sys_timerfd_settime").return ?
{
	@__syscall_gate_compat_simple
}

# times ______________________________________________________
#
# long sys_times(struct tms __user * tbuf)
# long compat_sys_times(struct compat_tms __user *tbuf)
probe nd_syscall.times = kprobe.function("compat_sys_times") ?,
                         kprobe.function("sys_times") ?
{
	name = "times"
	asmlinkage()
	buf_uaddr = pointer_arg(1) 
	argstr = sprintf("%s", _struct_tms_u(buf_uaddr))
}
probe nd_syscall.times.return = kprobe.function("compat_sys_times").return ?,
                                kprobe.function("sys_times").return ?
{
	name = "times"
	retstr = returnstr(1)
}

# tkill ______________________________________________________
#
# asmlinkage long
# sys_tkill(int pid,
#	     int sig)
#
probe nd_syscall.tkill = kprobe.function("sys_tkill") ?
{
	name = "tkill"
	asmlinkage()
	pid = int_arg(1)
	sig = int_arg(2)
	argstr = sprintf("%d, %s", pid, _signal_name(sig))
}
probe nd_syscall.tkill.return = kprobe.function("sys_tkill").return ?
{
	name = "tkill"
	retstr = returnstr(1)
}

# truncate ___________________________________________________
#
# sys_truncate(const char __user * path, unsigned long length)
# sys_truncate64(const char __user * path, loff_t length)
# COMPAT_SYSCALL_DEFINE2(truncate, const char __user *, path,
#			 compat_off_t, length)
#
probe nd_syscall.truncate = __nd_syscall.truncate ?,
			    __nd_syscall.truncate64 ?,
			    __nd_syscall.compat_truncate ?
{
	name = "truncate"
	asmlinkage()
	path_uaddr = pointer_arg(1)
	path = user_string_quoted(path_uaddr)
	argstr = sprintf("%s, %d", user_string_quoted(path_uaddr), length)
}
probe __nd_syscall.truncate = kprobe.function("sys_truncate") ?
{
	@__syscall_compat_gate(@const("__NR_truncate"), 
			       @const("__NR_compat_truncate"))
	asmlinkage()
	length = long_arg(2)
}
probe __nd_syscall.truncate64 = kprobe.function("sys_truncate64") ?
{
	asmlinkage()
	length = longlong_arg(2)
}
probe __nd_syscall.compat_truncate = kprobe.function("compat_sys_truncate") ?
{
	asmlinkage()
	length = int_arg(2)
}
probe nd_syscall.truncate.return = __nd_syscall.truncate.return ?,
	kprobe.function("sys_truncate64").return ?,
	kprobe.function("compat_sys_truncate").return ?
{
	name = "truncate"
	retstr = returnstr(1)
}
probe __nd_syscall.truncate.return = kprobe.function("sys_truncate").return ?
{
	@__syscall_compat_gate(@const("__NR_truncate"), 
			       @const("__NR_compat_truncate"))
}

# tux ________________________________________________________
# long sys_tux (unsigned int action, user_req_t *u_info)
#
probe nd_syscall.tux = kprobe.function("sys_tux") ?
{
	name = "tux"
	asmlinkage()
	action = uint_arg(1)
	u_info_uaddr = pointer_arg(2)
	argstr = sprintf("%d, %p", action, u_info_uaddr)
}
probe nd_syscall.tux.return = kprobe.function("sys_tux").return ?
{
	name = "tux"
	retstr = returnstr(1)
}

# umask ______________________________________________________
# long sys_umask(int mask)
#
probe nd_syscall.umask = kprobe.function("sys_umask") ?
{
	name = "umask"
	asmlinkage()
	mask = uint_arg(1)
	argstr = sprintf("%#o", mask)
}
probe nd_syscall.umask.return = kprobe.function("sys_umask").return ?
{
	name = "umask"
	retstr = returnstr(3)
}

# umount _____________________________________________________
# long sys_umount(char __user * name, int flags)
# SYSCALL_DEFINE1(oldumount, char __user *, name)
#
probe nd_syscall.umount = __nd_syscall.umount, __nd_syscall.oldumount ?
{
	name = "umount"
}
probe __nd_syscall.umount = kprobe.function("sys_umount")
{
	@__syscall_compat_gate(@const("__NR_umount2"), @const("__NR_compat_umount2"))
	asmlinkage()
	target = user_string_quoted(pointer_arg(1))
	flags = int_arg(2)
	flags_str = _umountflags_str(flags)
	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
			 flags_str)
}
probe __nd_syscall.oldumount = kprobe.function("sys_oldumount") ?
{
	asmlinkage()
	target = user_string_quoted(pointer_arg(1))
	flags = 0
	flags_str = _umountflags_str(0)
	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
			 flags_str)
}
probe nd_syscall.umount.return = __nd_syscall.umount.return,
				 kprobe.function("sys_oldumount").return ?
{
	name = "umount"
	retstr = returnstr(1)
}
probe __nd_syscall.umount.return = kprobe.function("sys_umount").return
{
	@__syscall_compat_gate(@const("__NR_umount2"), @const("__NR_compat_umount2"))
}

# uname ______________________________________________________
#
# int sys_uname(struct old_utsname __user *name)
# long sys_newuname(struct new_utsname __user * name)
# int sys_olduname(struct oldold_utsname __user * name)
# int sys32_olduname(struct oldold_utsname __user * name)
# long sys32_uname(struct old_utsname __user * name)
#
probe nd_syscall.uname = kprobe.function("sys_uname") ?,
                         kprobe.function("sys_olduname") ?,
                         kprobe.function("sys32_olduname") ?,
                         kprobe.function("sys32_uname") ?,
                         kprobe.function("sys_newuname") ?
{
	name = "uname"
	_func_name = ppfunc()
	if (_func_name != "sys32_uname") {
		if (_func_name == "sys_uname" || _func_name == "sys_olduname") {
			%( arch != "powerpc" %? asmlinkage() %)
		} else
			asmlinkage()
	}
	argstr = sprintf("%p", pointer_arg(1))
}

probe nd_syscall.uname.return = kprobe.function("sys_uname").return ?,
                                kprobe.function("sys_olduname").return ?,
                                kprobe.function("sys32_olduname").return ?,
                                kprobe.function("sys32_uname").return ?,
                                kprobe.function("sys_newuname").return ?
{
	name = "uname"
	retstr = returnstr(1)
}

# unlink _____________________________________________________
# long sys_unlink(const char __user * pathname)
#
probe nd_syscall.unlink = kprobe.function("sys_unlink") ?
{
	name = "unlink"
	asmlinkage()
	pathname_uaddr = pointer_arg(1)
	pathname = user_string_quoted(pathname_uaddr)
	argstr = user_string_quoted(pathname_uaddr)
}
probe nd_syscall.unlink.return = kprobe.function("sys_unlink").return ?
{
	name = "unlink"
	retstr = returnstr(1)
}

# unlinkat ___________________________________________________
# new function with 2.6.16
# long sys_unlinkat(int dfd, const char __user *pathname,
#	int flag)
probe nd_syscall.unlinkat = kprobe.function("sys_unlinkat") ?
{
	name = "unlinkat"
	asmlinkage()
	dfd = int_arg(1)
	dfd_str = _dfd_str(dfd)
	pathname = pointer_arg(2)
	pathname_str = user_string_quoted(pathname)
	flag = uint_arg(3)
	flag_str = _at_flag_str(flag)
	argstr = sprintf("%s, %s, %s", dfd_str, user_string_quoted(pathname), flag_str)
}
probe nd_syscall.unlinkat.return = kprobe.function("sys_unlinkat").return ?
{
	name = "unlinkat"
	retstr = returnstr(1)
}

# unshare ____________________________________________________
# new function with 2.6.16
# long sys_unshare(unsigned long unshare_flags)
probe nd_syscall.unshare = kprobe.function("sys_unshare") ?
{
	name = "unshare"
	asmlinkage()
	unshare_flags = ulong_arg(1)
	argstr = __fork_flags(unshare_flags)
}
probe nd_syscall.unshare.return = kprobe.function("sys_unshare").return ?
{
	name = "unshare"
	retstr = returnstr(1)
}

# uselib _____________________________________________________
#
# asmlinkage long
# sys_uselib(const char __user * library)
#
probe nd_syscall.uselib = kprobe.function("sys_uselib") ?
{
	name = "uselib"
	asmlinkage()
	library_uaddr = pointer_arg(1)
	library = user_string_quoted(library_uaddr)
	argstr = user_string_quoted(library_uaddr)
}
probe nd_syscall.uselib.return = kprobe.function("sys_uselib").return ?
{
	name = "uselib"
	retstr = returnstr(1)
}

# userfaultfd ________________________________________________
# SYSCALL_DEFINE2(userfaultfd, int, flags)
probe nd_syscall.userfaultfd = kprobe.function("sys_userfaultfd").call ?
{
	name = "userfaultfd"
	asmlinkage()
	flags = int_arg(1)
	flags_str = _userfaultfd_flags_str(flags)
	argstr = sprintf("%s", _userfaultfd_flags_str(flags))
}
probe nd_syscall.userfaultfd.return =
	kprobe.function("sys_userfaultfd").return ?
{
	name = "userfaultfd"
	retstr = returnstr(1)
}

# ustat ______________________________________________________
# long sys_ustat(unsigned dev, struct ustat __user * ubuf)
#
probe nd_syscall.ustat = kprobe.function("sys_ustat") ?
{
	name = "ustat"
	asmlinkage()
	dev = uint_arg(1)
	ubuf_uaddr = pointer_arg(2)
	argstr = sprintf("%u, %p", dev, ubuf_uaddr)
}
probe nd_syscall.ustat.return = kprobe.function("sys_ustat").return ?
{
	name = "ustat"
	retstr = returnstr(1)
}
#
# long sys32_ustat(unsigned dev, struct ustat32 __user *u32p)
#
# Since 2.6.30 sys32_ustat is called compat_sys_ustat and is now asmlinkage:
#
# asmlinkage long compat_sys_ustat(unsigned dev, struct compat_ustat __user *u)
#
probe nd_syscall.ustat32 = __nd_syscall.ustat32 ?, __nd_syscall.compat_ustat ?
{
	name = "ustat"
	argstr = sprintf("%u, %p", dev, ubuf_uaddr)
}
probe __nd_syscall.ustat32 = kprobe.function("sys32_ustat") ?
{
	dev = uint_arg(1)
	ubuf_uaddr = pointer_arg(2)
}
probe __nd_syscall.compat_ustat = kprobe.function("compat_sys_ustat") ?
{
	asmlinkage()
	dev = uint_arg(1)
	ubuf_uaddr = pointer_arg(2)
}
probe nd_syscall.ustat32.return = kprobe.function("sys32_ustat").return ?,
                                  kprobe.function("compat_sys_ustat").return ?
{
	name = "ustat"
	retstr = returnstr(1)
}

# utime ______________________________________________________
# long sys_utime(char __user * filename, struct utimbuf __user * times)
probe nd_syscall.utime = kprobe.function("sys_utime") ?
{
	name = "utime"
	asmlinkage()
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	buf_uaddr = pointer_arg(2)
	actime = _struct_utimbuf_actime(buf_uaddr)
	modtime = _struct_utimbuf_modtime(buf_uaddr)
	argstr = sprintf("%s, [%s, %s]", filename,
	       	 	 ctime(actime), ctime(modtime))
}
probe nd_syscall.utime.return = kprobe.function("sys_utime").return ?
{
	name = "utime"
	retstr = returnstr(1)
}

# long compat_sys_utime(char __user *filename, struct compat_utimbuf __user *t)
probe nd_syscall.compat_utime = kprobe.function("compat_sys_utime") ?
{
	name = "utime"
	asmlinkage()
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	buf_uaddr = pointer_arg(2)
	actime = _struct_compat_utimbuf_actime(buf_uaddr)
	modtime = _struct_compat_utimbuf_modtime(buf_uaddr)
	argstr = sprintf("%s, [%s, %s]", filename,
	       	 	 ctime(actime), ctime(modtime))
}
probe nd_syscall.compat_utime.return = kprobe.function("compat_sys_utime").return ?
{
	name = "utime"
	retstr = returnstr(1)
}

# utimes _____________________________________________________
#
# long sys_utimes(char __user * filename, struct timeval __user * utimes)
#
probe nd_syscall.utimes = kprobe.function("sys_utimes") ?
{
	name = "utimes"
	asmlinkage()
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	tvp_uaddr = pointer_arg(2)
	argstr = sprintf("%s, %s", user_string_quoted(filename_uaddr),
		_struct_timeval_u(tvp_uaddr, 2))
}
probe nd_syscall.utimes.return = kprobe.function("sys_utimes").return ?
{
	name = "utimes"
	retstr = returnstr(1)
}

# compat_sys_utimes ________________________________________
#
# long compat_sys_utimes(char __user *filename, struct compat_timeval __user *t)
#
probe nd_syscall.compat_sys_utimes = kprobe.function("compat_sys_utimes") ?
{
	name = "utimes"
	asmlinkage()
	filename = user_string_quoted(pointer_arg(1))
	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
				 _struct_compat_timeval_u(pointer_arg(2), 2))
}
probe nd_syscall.compat_sys_utimes.return = kprobe.function("compat_sys_utimes").return ?
{
	name = "utimes"
	retstr = returnstr(1)
}

# utimensat ____________________________________________________
# long sys_utimensat(int dfd, char __user *filename, struct timespec __user *utimes, int flags)
# long compat_sys_utimensat(unsigned int dfd, char __user *filename, struct compat_timespec __user *t, int flags)
#
probe nd_syscall.utimensat = kprobe.function("sys_utimensat") ?
{
	name = "utimensat"
	asmlinkage()
	dfd = int_arg(1)
	dfd_str = _dfd_str(dfd)
	filename_uaddr = pointer_arg(2)
	filename = user_string_quoted(filename_uaddr)
	tsp_uaddr = pointer_arg(3)
	flags = int_arg(4)
	flags_str = _at_flag_str(flags)
	argstr = sprintf("%s, %s, %s, %s", _dfd_str(dfd),
			 user_string_quoted(filename_uaddr),
			 _struct_timespec_u(tsp_uaddr, 2),
			 _at_flag_str(flags))
}
probe nd_syscall.compat_utimensat = kprobe.function("compat_sys_utimensat") ?
{
	name = "utimensat"
	asmlinkage()
	dfd = int_arg(1)
	dfd_str = _dfd_str(dfd)
	filename_uaddr = pointer_arg(2)
	filename = user_string_quoted(filename_uaddr)
	tsp_uaddr = pointer_arg(3)
	flags = int_arg(4)
	flags_str = _at_flag_str(flags)
	argstr = sprintf("%s, %s, %s, %s", _dfd_str(dfd),
			 user_string_quoted(filename_uaddr),
			 _struct_compat_timespec_u(tsp_uaddr, 2),
			 _at_flag_str(flags))
}
probe nd_syscall.utimensat.return = kprobe.function("sys_utimensat").return ?
{
	name = "utimensat"
	retstr = returnstr(1)
}
probe nd_syscall.compat_utimensat.return = kprobe.function("compat_sys_utimensat").return ?
{
	name = "utimensat"
	retstr = returnstr(1)
}

# vfork _______________________________________________________
#
# SYSCALL_DEFINE0(vfork)
#
probe nd_syscall.vfork = kprobe.function("sys_vfork").call ?
{
	name = "vfork"
	argstr = ""
}
probe nd_syscall.vfork.return = kprobe.function("sys_vfork").return ?
{
	name = "vfork"
	retstr = returnstr(1)
}

# vhangup ____________________________________________________
#
# asmlinkage long
# sys_vhangup(void)
#
probe nd_syscall.vhangup = kprobe.function("sys_vhangup")
{
	name = "vhangup"
	argstr = ""
}
probe nd_syscall.vhangup.return = kprobe.function("sys_vhangup").return
{
	name = "vhangup"
	retstr = returnstr(1)
}

# vmsplice ___________________________________________________
#
# long sys_vmsplice(int fd, const struct iovec __user *iov,
#	    unsigned long nr_segs, unsigned int flags)
# long compat_sys_vmsplice(int fd, const struct compat_iovec __user *iov32,
#	    unsigned int nr_segs, unsigned int flags)
#
probe nd_syscall.vmsplice = kprobe.function("sys_vmsplice") ?
{
	@__syscall_gate_compat_simple
	name = "vmsplice"
	asmlinkage()
	fd = int_arg(1)
	iov = pointer_arg(2)
	nr_segs = ulong_arg(3)
	flags = uint_arg(4)
	flags_str = _stp_splice_flags_str(flags)
	argstr = sprintf("%d, %p, %u, %s", fd, iov, nr_segs, flags_str)
}
probe nd_syscall.compat_vmsplice = kprobe.function("compat_sys_vmsplice") ?
{
	name = "vmsplice"
	asmlinkage()
	fd = int_arg(1)
	iov = pointer_arg(2)
	nr_segs = ulong_arg(3)
	flags = uint_arg(4)
	flags_str = _stp_splice_flags_str(flags)
	argstr = sprintf("%d, %p, %u, %s", fd, iov, nr_segs, flags_str)
}
probe nd_syscall.vmsplice.return = kprobe.function("sys_vmsplice").return ?
{
	@__syscall_gate_compat_simple
	name = "vmsplice"
	retstr = returnstr(1)
}
probe nd_syscall.compat_vmsplice.return = kprobe.function("compat_sys_vmsplice").return ?
{
	name = "vmsplice"
	retstr = returnstr(1)
}

# wait4 ______________________________________________________
#
# long sys_wait4(pid_t pid,
#	     int __user *stat_addr,
#	     int options,
#	     struct rusage __user *ru)
# COMPAT_SYSCALL_DEFINE4(wait4,
#	compat_pid_t, pid,
#	compat_uint_t __user *, stat_addr,
#	int, options,
#	struct compat_rusage __user *, ru)
#
probe nd_syscall.wait4 = __nd_syscall.wait4, __nd_syscall.compat_wait4 ?
{
	name = "wait4"
	asmlinkage()
	pid = int_arg(1)
	status_uaddr = pointer_arg(2)
	options = int_arg(3)
	options_str = _wait4_opt_str(options)
	rusage_uaddr = pointer_arg(4)
	argstr = sprintf("%d, %p, %s, %p", pid, status_uaddr, options_str,
			 rusage_uaddr)
}
probe __nd_syscall.wait4 = kprobe.function("sys_wait4")
{
	@__syscall_gate(@const("__NR_wait4"))
}
probe __nd_syscall.compat_wait4 = kprobe.function("compat_sys_wait4") ?
{
	@__compat_syscall_gate(@const("__NR_compat_wait4"))
}
probe nd_syscall.wait4.return = __nd_syscall.wait4.return,
	__nd_syscall.compat_wait4.return ?
{
	name = "wait4"

	asmlinkage()
	status_uaddr = pointer_arg(2)
	if (returnval () <= 0)
		status_str = "N/A"
	else if (status_uaddr == 0)
		status_str = "NULL"
	else
		status_str = _wait_status_str(user_int(status_uaddr))

	retstr = returnstr(1)
}
probe __nd_syscall.wait4.return = kprobe.function("sys_wait4").return
{
	@__syscall_gate(@const("__NR_wait4"))
}
probe __nd_syscall.compat_wait4.return =
	kprobe.function("compat_sys_wait4").return ?
{
	@__compat_syscall_gate(@const("__NR_compat_wait4"))
}

# waitid _____________________________________________________
#
# long sys_waitid(int which,
#		pid_t pid,
#		struct siginfo __user *infop,
#		int options,
#		struct rusage __user *ru)
# COMPAT_SYSCALL_DEFINE5(waitid,
#		int, which, compat_pid_t, pid,
#		struct compat_siginfo __user *, uinfo, int, options,
#		struct compat_rusage __user *, uru)
#
probe nd_syscall.waitid = __nd_syscall.waitid,
	kprobe.function("compat_sys_waitid") ?
{
	name = "waitid"
	asmlinkage()
	which = int_arg(1)
	which_str = _waitid_which_str(which)
	pid = int_arg(2)
	infop_uaddr = pointer_arg(3)
	options = int_arg(4)
	options_str = _wait4_opt_str(options)
	rusage_uaddr = pointer_arg(5)
	argstr = sprintf("%s, %d, %p, %s, %p", _waitid_which_str(which),
			 pid, infop_uaddr, _wait4_opt_str(options),
			 rusage_uaddr)
}
probe __nd_syscall.waitid = kprobe.function("sys_waitid")
{
	@__syscall_gate_compat_simple
}
probe nd_syscall.waitid.return = __nd_syscall.waitid.return,
	kprobe.function("compat_sys_waitid").return ?
{
	name = "waitid"
	retstr = returnstr(1)
}
probe __nd_syscall.waitid.return = kprobe.function("sys_waitid").return
{
	@__syscall_gate_compat_simple
}

# waitpid ____________________________________________________
#
# (waitpid is usually implemented via wait4 but not always)
# SYSCALL_DEFINE3(waitpid, pid_t, pid, int __user *, stat_addr, int, options)
#
probe nd_syscall.waitpid = kprobe.function("sys_waitpid") ?,
	kprobe.function("sys32_waitpid").call ?
{
	name = "waitpid"
	asmlinkage()
	pid = int_arg(1)
	status_uaddr = pointer_arg(2)
	options = int_arg(3)
	options_str = _wait4_opt_str(options)
	argstr = sprintf("%d, %p, %s", pid, status_uaddr, options_str)
}
probe nd_syscall.waitpid.return = kprobe.function("sys_waitpid").return ?,
	kprobe.function("sys32_waitpid").return ?
{
	name = "waitpid"
	retstr = returnstr(1)
}

# write ______________________________________________________
#
# ssize_t sys_write(unsigned int fd,
#	     const char __user * buf,
#	     size_t count)
#
# s390x needs special compat handling, since its wrapper function
# rejects some calls.
#
probe nd_syscall.write =
%( arch == "s390" %?
	__nd_syscall.write, kprobe.function("sys32_write").call ?
%:
	__nd_syscall.write
%)
{
	name = "write"
	asmlinkage()
	fd = int_arg(1)
	buf_uaddr = pointer_arg(2)
	count = ulong_arg(3)
	argstr = sprintf("%d, %s, %u", fd,
			 user_buffer_quoted(buf_uaddr, count,
					       syscall_string_trunc),
			 count)
}
probe __nd_syscall.write = kprobe.function("sys_write")
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}
probe nd_syscall.write.return =
%( arch == "s390" %?
	__nd_syscall.write.return, kprobe.function("sys32_write").return ?
%:
	__nd_syscall.write.return
%)
{
	name = "write"
	retstr = returnstr(1)
}
probe __nd_syscall.write.return = kprobe.function("sys_write").return
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}

# writev _____________________________________________________
#
# ssize_t sys_writev(unsigned long fd,
#		const struct iovec __user *vec,
#		unsigned long vlen)
# ssize_t compat_sys_writev(unsigned long fd,
#		const struct compat_iovec __user *vec,
#		unsigned long vlen)
#
probe nd_syscall.writev = kprobe.function("compat_sys_writev") ?,
                          kprobe.function("sys_writev") ?
{
	name = "writev"
	asmlinkage()
	vector_uaddr = pointer_arg(2)
	count = int_arg(3)
	fd = int_arg(1)
	argstr = sprintf("%d, %p, %d", fd, vector_uaddr, count)
}

probe nd_syscall.writev.return = kprobe.function("compat_sys_writev").return ?,
                                 kprobe.function("sys_writev").return ?
{
	name = "writev"
	retstr = returnstr(1)
}
