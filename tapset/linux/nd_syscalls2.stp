
# uselib _____________________________________________________
#
# asmlinkage long
# sys_uselib(const char __user * library)
#
probe nd_syscall.uselib = kprobe.function("sys_uselib") ?
{
	name = "uselib"
	asmlinkage()
	library_uaddr = pointer_arg(1)
	library = user_string_quoted(library_uaddr)
	argstr = user_string_quoted(library_uaddr)
}
probe nd_syscall.uselib.return = kprobe.function("sys_uselib").return ?
{
	name = "uselib"
	retstr = returnstr(1)
}

# userfaultfd ________________________________________________
# SYSCALL_DEFINE2(userfaultfd, int, flags)
probe nd_syscall.userfaultfd = kprobe.function("sys_userfaultfd").call ?
{
	name = "userfaultfd"
	asmlinkage()
	flags = int_arg(1)
	flags_str = _userfaultfd_flags_str(flags)
	argstr = sprintf("%s", _userfaultfd_flags_str(flags))
}
probe nd_syscall.userfaultfd.return =
	kprobe.function("sys_userfaultfd").return ?
{
	name = "userfaultfd"
	retstr = returnstr(1)
}

# ustat ______________________________________________________
# long sys_ustat(unsigned dev, struct ustat __user * ubuf)
#
probe nd_syscall.ustat = kprobe.function("sys_ustat") ?
{
	name = "ustat"
	asmlinkage()
	dev = uint_arg(1)
	ubuf_uaddr = pointer_arg(2)
	argstr = sprintf("%u, %p", dev, ubuf_uaddr)
}
probe nd_syscall.ustat.return = kprobe.function("sys_ustat").return ?
{
	name = "ustat"
	retstr = returnstr(1)
}
#
# long sys32_ustat(unsigned dev, struct ustat32 __user *u32p)
#
# Since 2.6.30 sys32_ustat is called compat_sys_ustat and is now asmlinkage:
#
# asmlinkage long compat_sys_ustat(unsigned dev, struct compat_ustat __user *u)
#
probe nd_syscall.ustat32 = __nd_syscall.ustat32 ?, __nd_syscall.compat_ustat ?
{
	name = "ustat"
	argstr = sprintf("%u, %p", dev, ubuf_uaddr)
}
probe __nd_syscall.ustat32 = kprobe.function("sys32_ustat") ?
{
	dev = uint_arg(1)
	ubuf_uaddr = pointer_arg(2)
}
probe __nd_syscall.compat_ustat = kprobe.function("compat_sys_ustat") ?
{
	asmlinkage()
	dev = uint_arg(1)
	ubuf_uaddr = pointer_arg(2)
}
probe nd_syscall.ustat32.return = kprobe.function("sys32_ustat").return ?,
                                  kprobe.function("compat_sys_ustat").return ?
{
	name = "ustat"
	retstr = returnstr(1)
}

# utime ______________________________________________________
# long sys_utime(char __user * filename, struct utimbuf __user * times)
probe nd_syscall.utime = kprobe.function("sys_utime") ?
{
	name = "utime"
	asmlinkage()
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	buf_uaddr = pointer_arg(2)
	actime = _struct_utimbuf_actime(buf_uaddr)
	modtime = _struct_utimbuf_modtime(buf_uaddr)
	argstr = sprintf("%s, [%s, %s]", filename,
	       	 	 ctime(actime), ctime(modtime))
}
probe nd_syscall.utime.return = kprobe.function("sys_utime").return ?
{
	name = "utime"
	retstr = returnstr(1)
}

# long compat_sys_utime(char __user *filename, struct compat_utimbuf __user *t)
probe nd_syscall.compat_utime = kprobe.function("compat_sys_utime") ?
{
	name = "utime"
	asmlinkage()
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	buf_uaddr = pointer_arg(2)
	actime = _struct_compat_utimbuf_actime(buf_uaddr)
	modtime = _struct_compat_utimbuf_modtime(buf_uaddr)
	argstr = sprintf("%s, [%s, %s]", filename,
	       	 	 ctime(actime), ctime(modtime))
}
probe nd_syscall.compat_utime.return = kprobe.function("compat_sys_utime").return ?
{
	name = "utime"
	retstr = returnstr(1)
}

# utimes _____________________________________________________
#
# long sys_utimes(char __user * filename, struct timeval __user * utimes)
#
probe nd_syscall.utimes = kprobe.function("sys_utimes") ?
{
	name = "utimes"
	asmlinkage()
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	tvp_uaddr = pointer_arg(2)
	argstr = sprintf("%s, %s", user_string_quoted(filename_uaddr),
		_struct_timeval_u(tvp_uaddr, 2))
}
probe nd_syscall.utimes.return = kprobe.function("sys_utimes").return ?
{
	name = "utimes"
	retstr = returnstr(1)
}

# compat_sys_utimes ________________________________________
#
# long compat_sys_utimes(char __user *filename, struct compat_timeval __user *t)
#
probe nd_syscall.compat_sys_utimes = kprobe.function("compat_sys_utimes") ?
{
	name = "utimes"
	asmlinkage()
	filename = user_string_quoted(pointer_arg(1))
	argstr = sprintf("%s, %s", user_string_quoted(pointer_arg(1)),
				 _struct_compat_timeval_u(pointer_arg(2), 2))
}
probe nd_syscall.compat_sys_utimes.return = kprobe.function("compat_sys_utimes").return ?
{
	name = "utimes"
	retstr = returnstr(1)
}

# utimensat ____________________________________________________
# long sys_utimensat(int dfd, char __user *filename, struct timespec __user *utimes, int flags)
# long compat_sys_utimensat(unsigned int dfd, char __user *filename, struct compat_timespec __user *t, int flags)
#
probe nd_syscall.utimensat = kprobe.function("sys_utimensat") ?
{
	name = "utimensat"
	asmlinkage()
	dfd = int_arg(1)
	dfd_str = _dfd_str(dfd)
	filename_uaddr = pointer_arg(2)
	filename = user_string_quoted(filename_uaddr)
	tsp_uaddr = pointer_arg(3)
	flags = int_arg(4)
	flags_str = _at_flag_str(flags)
	argstr = sprintf("%s, %s, %s, %s", _dfd_str(dfd),
			 user_string_quoted(filename_uaddr),
			 _struct_timespec_u(tsp_uaddr, 2),
			 _at_flag_str(flags))
}
probe nd_syscall.compat_utimensat = kprobe.function("compat_sys_utimensat") ?
{
	name = "utimensat"
	asmlinkage()
	dfd = int_arg(1)
	dfd_str = _dfd_str(dfd)
	filename_uaddr = pointer_arg(2)
	filename = user_string_quoted(filename_uaddr)
	tsp_uaddr = pointer_arg(3)
	flags = int_arg(4)
	flags_str = _at_flag_str(flags)
	argstr = sprintf("%s, %s, %s, %s", _dfd_str(dfd),
			 user_string_quoted(filename_uaddr),
			 _struct_compat_timespec_u(tsp_uaddr, 2),
			 _at_flag_str(flags))
}
probe nd_syscall.utimensat.return = kprobe.function("sys_utimensat").return ?
{
	name = "utimensat"
	retstr = returnstr(1)
}
probe nd_syscall.compat_utimensat.return = kprobe.function("compat_sys_utimensat").return ?
{
	name = "utimensat"
	retstr = returnstr(1)
}

# vfork _______________________________________________________
#
# SYSCALL_DEFINE0(vfork)
#
probe nd_syscall.vfork = kprobe.function("sys_vfork").call ?
{
	name = "vfork"
	argstr = ""
}
probe nd_syscall.vfork.return = kprobe.function("sys_vfork").return ?
{
	name = "vfork"
	retstr = returnstr(1)
}

# vhangup ____________________________________________________
#
# asmlinkage long
# sys_vhangup(void)
#
probe nd_syscall.vhangup = kprobe.function("sys_vhangup")
{
	name = "vhangup"
	argstr = ""
}
probe nd_syscall.vhangup.return = kprobe.function("sys_vhangup").return
{
	name = "vhangup"
	retstr = returnstr(1)
}

# vmsplice ___________________________________________________
#
# long sys_vmsplice(int fd, const struct iovec __user *iov,
#	    unsigned long nr_segs, unsigned int flags)
# long compat_sys_vmsplice(int fd, const struct compat_iovec __user *iov32,
#	    unsigned int nr_segs, unsigned int flags)
#
probe nd_syscall.vmsplice = kprobe.function("sys_vmsplice") ?
{
	@__syscall_gate_compat_simple
	name = "vmsplice"
	asmlinkage()
	fd = int_arg(1)
	iov = pointer_arg(2)
	nr_segs = ulong_arg(3)
	flags = uint_arg(4)
	flags_str = _stp_splice_flags_str(flags)
	argstr = sprintf("%d, %p, %u, %s", fd, iov, nr_segs, flags_str)
}
probe nd_syscall.compat_vmsplice = kprobe.function("compat_sys_vmsplice") ?
{
	name = "vmsplice"
	asmlinkage()
	fd = int_arg(1)
	iov = pointer_arg(2)
	nr_segs = ulong_arg(3)
	flags = uint_arg(4)
	flags_str = _stp_splice_flags_str(flags)
	argstr = sprintf("%d, %p, %u, %s", fd, iov, nr_segs, flags_str)
}
probe nd_syscall.vmsplice.return = kprobe.function("sys_vmsplice").return ?
{
	@__syscall_gate_compat_simple
	name = "vmsplice"
	retstr = returnstr(1)
}
probe nd_syscall.compat_vmsplice.return = kprobe.function("compat_sys_vmsplice").return ?
{
	name = "vmsplice"
	retstr = returnstr(1)
}

# wait4 ______________________________________________________
#
# long sys_wait4(pid_t pid,
#	     int __user *stat_addr,
#	     int options,
#	     struct rusage __user *ru)
# COMPAT_SYSCALL_DEFINE4(wait4,
#	compat_pid_t, pid,
#	compat_uint_t __user *, stat_addr,
#	int, options,
#	struct compat_rusage __user *, ru)
#
probe nd_syscall.wait4 = __nd_syscall.wait4, __nd_syscall.compat_wait4 ?
{
	name = "wait4"
	asmlinkage()
	pid = int_arg(1)
	status_uaddr = pointer_arg(2)
	options = int_arg(3)
	options_str = _wait4_opt_str(options)
	rusage_uaddr = pointer_arg(4)
	argstr = sprintf("%d, %p, %s, %p", pid, status_uaddr, options_str,
			 rusage_uaddr)
}
probe __nd_syscall.wait4 = kprobe.function("sys_wait4")
{
	@__syscall_gate(@const("__NR_wait4"))
}
probe __nd_syscall.compat_wait4 = kprobe.function("compat_sys_wait4") ?
{
	@__compat_syscall_gate(@const("__NR_compat_wait4"))
}
probe nd_syscall.wait4.return = __nd_syscall.wait4.return,
	__nd_syscall.compat_wait4.return ?
{
	name = "wait4"

	asmlinkage()
	status_uaddr = pointer_arg(2)
	if (returnval () <= 0)
		status_str = "N/A"
	else if (status_uaddr == 0)
		status_str = "NULL"
	else
		status_str = _wait_status_str(user_int(status_uaddr))

	retstr = returnstr(1)
}
probe __nd_syscall.wait4.return = kprobe.function("sys_wait4").return
{
	@__syscall_gate(@const("__NR_wait4"))
}
probe __nd_syscall.compat_wait4.return =
	kprobe.function("compat_sys_wait4").return ?
{
	@__compat_syscall_gate(@const("__NR_compat_wait4"))
}

# waitid _____________________________________________________
#
# long sys_waitid(int which,
#		pid_t pid,
#		struct siginfo __user *infop,
#		int options,
#		struct rusage __user *ru)
# COMPAT_SYSCALL_DEFINE5(waitid,
#		int, which, compat_pid_t, pid,
#		struct compat_siginfo __user *, uinfo, int, options,
#		struct compat_rusage __user *, uru)
#
probe nd_syscall.waitid = __nd_syscall.waitid,
	kprobe.function("compat_sys_waitid") ?
{
	name = "waitid"
	asmlinkage()
	which = int_arg(1)
	which_str = _waitid_which_str(which)
	pid = int_arg(2)
	infop_uaddr = pointer_arg(3)
	options = int_arg(4)
	options_str = _wait4_opt_str(options)
	rusage_uaddr = pointer_arg(5)
	argstr = sprintf("%s, %d, %p, %s, %p", _waitid_which_str(which),
			 pid, infop_uaddr, _wait4_opt_str(options),
			 rusage_uaddr)
}
probe __nd_syscall.waitid = kprobe.function("sys_waitid")
{
	@__syscall_gate_compat_simple
}
probe nd_syscall.waitid.return = __nd_syscall.waitid.return,
	kprobe.function("compat_sys_waitid").return ?
{
	name = "waitid"
	retstr = returnstr(1)
}
probe __nd_syscall.waitid.return = kprobe.function("sys_waitid").return
{
	@__syscall_gate_compat_simple
}

# waitpid ____________________________________________________
#
# (waitpid is usually implemented via wait4 but not always)
# SYSCALL_DEFINE3(waitpid, pid_t, pid, int __user *, stat_addr, int, options)
#
probe nd_syscall.waitpid = kprobe.function("sys_waitpid") ?,
	kprobe.function("sys32_waitpid").call ?
{
	name = "waitpid"
	asmlinkage()
	pid = int_arg(1)
	status_uaddr = pointer_arg(2)
	options = int_arg(3)
	options_str = _wait4_opt_str(options)
	argstr = sprintf("%d, %p, %s", pid, status_uaddr, options_str)
}
probe nd_syscall.waitpid.return = kprobe.function("sys_waitpid").return ?,
	kprobe.function("sys32_waitpid").return ?
{
	name = "waitpid"
	retstr = returnstr(1)
}

# write ______________________________________________________
#
# ssize_t sys_write(unsigned int fd,
#	     const char __user * buf,
#	     size_t count)
#
# s390x needs special compat handling, since its wrapper function
# rejects some calls.
#
probe nd_syscall.write =
%( arch == "s390" %?
	__nd_syscall.write, kprobe.function("sys32_write").call ?
%:
	__nd_syscall.write
%)
{
	name = "write"
	asmlinkage()
	fd = int_arg(1)
	buf_uaddr = pointer_arg(2)
	count = ulong_arg(3)
	argstr = sprintf("%d, %s, %u", fd,
			 user_buffer_quoted(buf_uaddr, count,
					       syscall_string_trunc),
			 count)
}
probe __nd_syscall.write = kprobe.function("sys_write")
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}
probe nd_syscall.write.return =
%( arch == "s390" %?
	__nd_syscall.write.return, kprobe.function("sys32_write").return ?
%:
	__nd_syscall.write.return
%)
{
	name = "write"
	retstr = returnstr(1)
}
probe __nd_syscall.write.return = kprobe.function("sys_write").return
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}

# writev _____________________________________________________
#
# ssize_t sys_writev(unsigned long fd,
#		const struct iovec __user *vec,
#		unsigned long vlen)
# ssize_t compat_sys_writev(unsigned long fd,
#		const struct compat_iovec __user *vec,
#		unsigned long vlen)
#
probe nd_syscall.writev = kprobe.function("compat_sys_writev") ?,
                          kprobe.function("sys_writev") ?
{
	name = "writev"
	asmlinkage()
	vector_uaddr = pointer_arg(2)
	count = int_arg(3)
	fd = int_arg(1)
	argstr = sprintf("%d, %p, %d", fd, vector_uaddr, count)
}

probe nd_syscall.writev.return = kprobe.function("compat_sys_writev").return ?,
                                 kprobe.function("sys_writev").return ?
{
	name = "writev"
	retstr = returnstr(1)
}
