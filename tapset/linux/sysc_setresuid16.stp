# setresuid16 ________________________________________________
#
# long sys_setresuid16(old_uid_t ruid, old_uid_t euid, old_uid_t suid)
#

@define _SYSCALL_SETRESUID16_NAME
%(
	name = "setresuid"
%)

@define _SYSCALL_SETRESUID16_ARGSTR
%(
	argstr = sprintf("%d, %d, %d", ruid, euid, suid)
%)

probe syscall.setresuid16 = dw_syscall.setresuid16 !,
                            nd_syscall.setresuid16 {}
probe syscall.setresuid16.return = dw_syscall.setresuid16.return !,
                                   nd_syscall.setresuid16.return {}

# dw_setresuid16 _____________________________________________________

probe dw_syscall.setresuid16 = kernel.function("sys_setresuid16").call ?
{
	@_SYSCALL_SETRESUID16_NAME
	ruid = __short($ruid)
	euid = __short($euid)
	suid = __short($suid)
	@_SYSCALL_SETRESUID16_ARGSTR
}
probe dw_syscall.setresuid16.return = kernel.function("sys_setresuid16").return ?
{
	@_SYSCALL_SETRESUID16_NAME
	retstr = return_str(1, $return)
}

# nd_setresuid16 _____________________________________________________

probe nd_syscall.setresuid16 = kprobe.function("sys_setresuid16") ?
{
	@_SYSCALL_SETRESUID16_NAME
	asmlinkage()
	ruid = __short(uint_arg(1))
	euid = __short(uint_arg(2))
	suid = __short(uint_arg(3))
	@_SYSCALL_SETRESUID16_ARGSTR
}
probe nd_syscall.setresuid16.return = kprobe.function("sys_setresuid16").return ?
{
	@_SYSCALL_SETRESUID16_NAME
	retstr = returnstr(1)
}
