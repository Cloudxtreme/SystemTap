
# fadvise64 _______________________________________________________
#
# asmlinkage long sys32_fadvise64(int fd, unsigned offset_lo,
#				  unsigned offset_hi,
#				  size_t len, int advice)
#
probe syscall.compat_fadvise64 = kernel.function("sys32_fadvise64").call ?
{
	name = "fadvise64"
	fd = __int32($fd)

	offset = (($offset_hi << 32) | $offset_lo)
	len = __int32($len)
	advice = __int32($advice)
	argstr = sprintf("%d, %d, %d, %s", __int32($fd), offset, len,
			 _fadvice_advice_str(__int32($advice)))
}
probe syscall.compat_fadvise64.return =
	kernel.function("sys32_fadvise64").return ?
{
	name = "fadvise64"
	retstr = return_str(1, $return)
}

# fadvise64_64 __________________________________________________
#
# long sys32_fadvise64_64(int fd, __u32 offset_low, __u32 offset_high,
#			__u32 len_low, __u32 len_high, int advice)
probe syscall.compat_fadvise64_64 = kernel.function("sys32_fadvise64_64").call ?
{
	name = "fadvise64"
	fd = __int32($fd)
	offset = (($offset_high << 32) | $offset_low)
	len = (($len_high << 32) | $len_low)
	advice = __int32($advice)
	argstr = sprintf("%d, %d, %d, %s", fd, offset, len,
			 _fadvice_advice_str(advice))
}
probe syscall.compat_fadvise64_64.return =
	kernel.function("sys32_fadvise64_64").return ?
{
	name = "fadvise64"
	retstr = return_str(1, $return)
}

# readahead __________________________________________________
#
# asmlinkage ssize_t
# ssize_t sys32_readahead(int fd, unsigned off_lo, unsigned off_hi, size_t count)
#
probe syscall.compat_readahead = kernel.function("sys32_readahead") ?
{
	name = "readahead"
	fd = __int32($fd)
	offset = (($off_hi << 32) | $off_lo)
	count = __uint32($count)
	argstr = sprintf("%d, %d, %u", fd, offset, count)
}
probe syscall.compat_readahead.return =
	kernel.function("sys32_readahead").return ?
{
	name = "readahead"
	retstr = return_str(1, $return)
}

# fallocate __________________________________________________
#
# asmlinkage long sys32_fallocate(int fd, int mode, unsigned offset_lo,
#				unsigned offset_hi, unsigned len_lo,
#				unsigned len_hi)
probe syscall.compat_fallocate = kernel.function("sys32_fallocate").call ?
{
	name = "fallocate"
	fd = __int32($fd)
	mode = __int32($mode)
	offset = (($offset_hi << 32) | $offset_lo)
	len = (($len_hi << 32) | $len_lo)
	argstr = sprintf("%d, %s, %#x, %u", fd, _stp_fallocate_mode_str(mode),
			 offset, len)
}
probe syscall.compat_fallocate.return =
	kernel.function("sys32_fallocate").return ?
{
	name = "fallocate"
	retstr = return_str(1, $return)
}

%( kernel_v < "3.7" %?
# execve _____________________________________________________
#
# In kernels < 3.7, sys_execve() was in arch-specific code (and had
# varying arguments). It was just a wrapper around generic
# do_execve(), but the wrapper could error out before calling
# do_execve(). So, we'll have to handle it in arch-specific tapset
# code to catch all calls.
#
# long sys_execve(char __user *name, char __user * __user *argv,
#		char __user * __user *envp, struct pt_regs regs)
probe syscall.execve = kernel.function("sys_execve").call
{
	name = "execve"
	filename = user_string_quoted($name)
	args = __get_argv($argv, 0)
	env_str = __count_envp($envp)
	argstr = sprintf("%s, %s, %s", filename, __get_argv($argv, 0),
			 __count_envp($envp))
}
probe syscall.execve.return = kernel.function("sys_execve").return
{
	name = "execve"
	retstr = return_str(1, $return)
}

# execve _____________________________________________________
#
#   asmlinkage long sys32_execve(char __user *name, compat_uptr_t __user *argv,
#			     compat_uptr_t __user *envp, struct pt_regs *regs)
probe syscall.compat_execve = kernel.function("sys32_execve").call ?
{
	name = "execve"
	filename = user_string_quoted($name)
	args = __get_compat_argv($argv, 0)
	env_str = __count_compat_envp($envp)
	argstr = sprintf("%s, %s, %s", filename, __get_compat_argv($argv, 0),
			 __count_compat_envp($envp))
}
probe syscall.compat_execve.return = kernel.function("sys32_execve").return ?
{
	name = "execve"
	retstr = return_str(1, $return)
}
%)

# lookup_dcookie _____________________________________________
# COMPAT_SYSCALL_DEFINE4(lookup_dcookie, u32, w0, u32, w1, char __user *,
#                        buf, compat_size_t, len)
# long sys32_lookup_dcookie(u32 addr_low, u32 addr_high, char __user *buf,
#                           size_t len)
#
probe syscall.compat_lookup_dcookie =
		kernel.function("compat_sys_lookup_dcookie") ?,
		kernel.function("sys32_lookup_dcookie") ?
{
        name = "lookup_dcookie"
        cookie = (@choose_defined($w1, $addr_high) << 32 | @choose_defined($w0, $addr_low))
        buffer_uaddr = $buf
        len = __ulong($len)
        argstr = sprintf("%#lx, %p, %#x", cookie, buffer_uaddr, len)
}
probe syscall.compat_lookup_dcookie.return =
		kernel.function("compat_sys_lookup_dcookie").return ?,
		kernel.function("sys32_lookup_dcookie").return ?
{
        name = "lookup_dcookie"
        retstr = return_str(1, $return)
}

