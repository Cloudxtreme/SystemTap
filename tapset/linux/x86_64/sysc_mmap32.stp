# In kernels < 2.6.33, mmap()/mmap2() was handled by arch-specific
# code.  In kernels >= 2.6.33, the arch-specific code just calls
# generic sys_mmap_pgoff().
%( kernel_v < "2.6.33" %?
#
# sys32_mmap(struct mmap_arg_struct32 __user *arg)
# sys32_mmap(struct mmap_arg_struct __user *arg)
#

@define _SYSCALL_MMAP32_NAME
%(
	name = "mmap"
%)

@define _SYSCALL_MMAP32_ARGSTR
%(
	argstr = sprintf("%p, %u, %s, %s, %d, %d", start, len,
	                 prot_str, flags_str, fd, offset)
%)

probe syscall.mmap32 = dw_syscall.mmap32 !, nd_syscall.mmap32 {}
probe syscall.mmap32.return = dw_syscall.mmap32.return !, nd_syscall.mmap32.return {}

# dw_mmap32 _____________________________________________________

probe dw_syscall.mmap32 = kernel.function("sys32_mmap")
{
	@_SYSCALL_MMAP32_NAME
	if (@defined(@cast($arg, "mmap_arg_struct32")->addr)) {
		start = user_long(&@cast($arg, "mmap_arg_struct32")->addr)
		len = user_long(&@cast($arg, "mmap_arg_struct32")->len)
		prot = user_long(&@cast($arg, "mmap_arg_struct32")->prot)
		flags = user_long(&@cast($arg, "mmap_arg_struct32")->flags)
		fd = user_long(&@cast($arg, "mmap_arg_struct32")->fd)
		offset = user_long(&@cast($arg, "mmap_arg_struct32")->offset)
	}
	else {
		start = user_long(&@cast($arg, "mmap_arg_struct")->addr)
		len = user_long(&@cast($arg, "mmap_arg_struct")->len)
		prot = user_long(&@cast($arg, "mmap_arg_struct")->prot)
		flags = user_long(&@cast($arg, "mmap_arg_struct")->flags)
		fd = user_long(&@cast($arg, "mmap_arg_struct")->fd)
		offset = user_long(&@cast($arg, "mmap_arg_struct")->offset)
	}
	prot_str = _mprotect_prot_str(prot)
	flags_str = _mmap_flags(flags)
	@_SYSCALL_MMAP32_ARGSTR
}

probe dw_syscall.mmap32.return = kernel.function("sys32_mmap").return
{
        @_SYSCALL_MMAP32_NAME
        retstr = return_str(2, $return)
}

# nd_mmap32 _____________________________________________________

probe nd_syscall.mmap32 = kprobe.function("sys32_mmap")
{
	@_SYSCALL_MMAP32_NAME
	asmlinkage()
	__args = &@cast(pointer_arg(1), "unsigned int", "kernel<linux/types.h>")
	start = user_uint32(&(__args)[0])
	len = user_uint32(&(__args)[1])
	prot = user_uint32(&(__args)[2])
	flags = user_uint32(&(__args)[3])
	fd = user_int(&(__args)[4])
	offset = user_uint32(&(__args)[5])
	prot_str = _mprotect_prot_str(prot)
	flags_str = _mmap_flags(flags)
	@_SYSCALL_MMAP32_ARGSTR
}
probe nd_syscall.mmap32.return = kprobe.function("sys32_mmap").return
{
	@_SYSCALL_MMAP32_NAME
	retstr = returnstr(2)
}
%)
