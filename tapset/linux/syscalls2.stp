
# write ______________________________________________________
#
# ssize_t sys_write(unsigned int fd,
#	     const char __user * buf,
#	     size_t count)
#
probe syscall.write =
%( arch == "s390" %?
	__syscall.write, kernel.function("sys32_write").call ?
%:
	__syscall.write
%)
{
	name = "write"
	fd = __int32($fd)
	buf_uaddr = $buf
	count = __ulong($count)
	argstr = sprintf("%d, %s, %u", __int32($fd),
		user_buffer_quoted($buf, $count, syscall_string_trunc),
		__ulong($count))
}
probe __syscall.write = kernel.function("sys_write").call
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}
probe syscall.write.return =
%( arch == "s390" %?
	__syscall.write.return, kernel.function("sys32_write").return ?
%:
	__syscall.write.return
%)
{
	name = "write"
	retstr = return_str(1, $return)
}
probe __syscall.write.return = kernel.function("sys_write").return
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}

# writev _____________________________________________________
#
# ssize_t sys_writev(unsigned long fd,
#		const struct iovec __user *vec,
#		unsigned long vlen)
# ssize_t compat_sys_writev(unsigned long fd,
#		const struct compat_iovec __user *vec,
#		unsigned long vlen)
#
probe syscall.writev = kernel.function("compat_sys_writev").call ?,
                       kernel.function("sys_writev").call
{
	name = "writev"
	vector_uaddr = $vec
	count = __int32($vlen)
	# Although the kernel gets an unsigned long fd, on the
	# user-side it is a signed int.  Fix this.
	fd = __int32($fd)
	argstr = sprintf("%d, %p, %d", __int32($fd), $vec, __int32($vlen))
}
probe syscall.writev.return = kernel.function("compat_sys_writev").return ?,
                              kernel.function("sys_writev").return
{
	name = "writev"
	retstr = return_str(1, $return)
}
