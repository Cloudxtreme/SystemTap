
# waitid _____________________________________________________
#
# long sys_waitid(int which,
#		pid_t pid,
#		struct siginfo __user *infop,
#		int options,
#		struct rusage __user *ru)
# COMPAT_SYSCALL_DEFINE5(waitid,
#		int, which, compat_pid_t, pid,
#		struct compat_siginfo __user *, uinfo, int, options,
#		struct compat_rusage __user *, uru)
#
probe syscall.waitid = __syscall.waitid,
	kernel.function("compat_sys_waitid").call ?
{
	name = "waitid"
	which = __int32($which)
	which_str = _waitid_which_str(__int32($which))
	pid = __int32(@choose_defined($upid, $pid))
	infop_uaddr = @__pointer(@choose_defined($infop, $uinfo))
	options = $options
	options_str = _wait4_opt_str($options)
	rusage_uaddr = @choose_defined($ru, $uru)
	argstr = sprintf("%s, %d, %p, %s, %p",
			 _waitid_which_str(__int32($which)),
			 __int32(@choose_defined($upid, $pid)),
			 infop_uaddr, _wait4_opt_str($options),
			 @__pointer(@choose_defined($ru, $uru)))
}
probe __syscall.waitid = kernel.function("sys_waitid").call
{
	@__syscall_gate_compat_simple
}
probe syscall.waitid.return = __syscall.waitid.return,
	kernel.function("compat_sys_waitid").return ?
{
	name = "waitid"
	retstr = return_str(1, $return)
}
probe __syscall.waitid.return = kernel.function("sys_waitid").return
{
	@__syscall_gate_compat_simple
}

# waitpid ____________________________________________________
#
# (waitpid is usually implemented via wait4 but not always)
# SYSCALL_DEFINE3(waitpid, pid_t, pid, int __user *, stat_addr, int, options)
#
probe syscall.waitpid = kernel.function("sys_waitpid").call ?,
	kernel.function("sys32_waitpid").call ?
{
	name = "waitpid"
	pid = __int32($pid)
	status_uaddr = $stat_addr
	options = __int32($options)
	options_str = _wait4_opt_str(options)
	argstr = sprintf("%d, %p, %s", __int32($pid), $stat_addr, options_str)
}
probe syscall.waitpid.return = kernel.function("sys_waitpid").return ?,
	kernel.function("sys32_waitpid").return ?
{
	name = "waitpid"
	retstr = return_str(1, $return)
}

# write ______________________________________________________
#
# ssize_t sys_write(unsigned int fd,
#	     const char __user * buf,
#	     size_t count)
#
probe syscall.write =
%( arch == "s390" %?
	__syscall.write, kernel.function("sys32_write").call ?
%:
	__syscall.write
%)
{
	name = "write"
	fd = __int32($fd)
	buf_uaddr = $buf
	count = __ulong($count)
	argstr = sprintf("%d, %s, %u", __int32($fd),
		user_buffer_quoted($buf, $count, syscall_string_trunc),
		__ulong($count))
}
probe __syscall.write = kernel.function("sys_write").call
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}
probe syscall.write.return =
%( arch == "s390" %?
	__syscall.write.return, kernel.function("sys32_write").return ?
%:
	__syscall.write.return
%)
{
	name = "write"
	retstr = return_str(1, $return)
}
probe __syscall.write.return = kernel.function("sys_write").return
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}

# writev _____________________________________________________
#
# ssize_t sys_writev(unsigned long fd,
#		const struct iovec __user *vec,
#		unsigned long vlen)
# ssize_t compat_sys_writev(unsigned long fd,
#		const struct compat_iovec __user *vec,
#		unsigned long vlen)
#
probe syscall.writev = kernel.function("compat_sys_writev").call ?,
                       kernel.function("sys_writev").call
{
	name = "writev"
	vector_uaddr = $vec
	count = __int32($vlen)
	# Although the kernel gets an unsigned long fd, on the
	# user-side it is a signed int.  Fix this.
	fd = __int32($fd)
	argstr = sprintf("%d, %p, %d", __int32($fd), $vec, __int32($vlen))
}
probe syscall.writev.return = kernel.function("compat_sys_writev").return ?,
                              kernel.function("sys_writev").return
{
	name = "writev"
	retstr = return_str(1, $return)
}
