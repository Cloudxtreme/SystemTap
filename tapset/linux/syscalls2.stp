
# setfsgid ___________________________________________________
# long sys_setfsgid(gid_t gid)
# long sys_setfsgid16(old_gid_t gid)
#
probe syscall.setfsgid = kernel.function("sys_setfsgid16").call ?,
                         kernel.function("sys_setfsgid").call ?
{
	name = "setfsgid"
	fsgid = __int32($gid)
	argstr = sprint(fsgid)
}
probe syscall.setfsgid.return = kernel.function("sys_setfsgid16").return ?,
                                kernel.function("sys_setfsgid").return ?
{
	name = "setfsgid"
	retstr = return_str(1, $return)
}

# setfsuid ___________________________________________________
# long sys_setfsuid(uid_t uid)
# long sys_setfsuid16(old_uid_t uid)
#
probe syscall.setfsuid = kernel.function("sys_setfsuid16").call ?,
                         kernel.function("sys_setfsuid").call ?
{
	name = "setfsuid"
	fsuid = __int32($uid)
	argstr = sprint(fsuid)
}
probe syscall.setfsuid.return = kernel.function("sys_setfsuid16").return ?,
                                kernel.function("sys_setfsuid").return ?
{
	name = "setfsuid"
	retstr = return_str(1, $return)
}

# setgid _____________________________________________________
#
# long sys_setgid(gid_t gid)
# long sys_setgid16(old_gid_t gid)
#
probe syscall.setgid = kernel.function("sys_setgid16").call ?,
                       kernel.function("sys_setgid").call ?
{
	name = "setgid"
	gid = __int32($gid)
	argstr = sprint(gid)
}
probe syscall.setgid.return = kernel.function("sys_setgid16").return ?,
                              kernel.function("sys_setgid").return ?
{
	name = "setgid"
	retstr = return_str(1, $return)
}

# setgroups __________________________________________________
#
# long sys_setgroups(int gidsetsize, gid_t __user *grouplist)
# long sys_setgroups16(int gidsetsize, old_gid_t __user *grouplist)
# long sys32_setgroups16(int gidsetsize, u16 __user *grouplist)
#
probe syscall.setgroups = kernel.function("sys_setgroups16").call ?,
                          kernel.function("sys32_setgroups16").call ?,
                          kernel.function("sys_setgroups").call ?
{
	name = "setgroups"
	size = __int32($gidsetsize)
	list_uaddr = $grouplist
	argstr = sprintf("%d, %p", __int32($gidsetsize), $grouplist)
}
probe syscall.setgroups.return = kernel.function("sys_setgroups16").return ?,
                                 kernel.function("sys32_setgroups16").return ?,
                                 kernel.function("sys_setgroups").return ?
{
	name = "setgroups"
	retstr = return_str(1, $return)
}

# sethostname ________________________________________________
#
# asmlinkage long
# sys_sethostname(char __user *name,
#		     int len)
#
probe syscall.sethostname = kernel.function("sys_sethostname").call
{
	name = "sethostname"
	hostname_uaddr = $name
	name_str = user_string_quoted($name)
	len = __int32($len)
	argstr = sprintf("%s, %d", user_string_quoted($name), __int32($len))
}
probe syscall.sethostname.return = kernel.function("sys_sethostname").return
{
	name = "sethostname"
	retstr = return_str(1, $return)
}
# setitimer __________________________________________________
#
# long sys_setitimer(int which,
#		   struct itimerval __user *value,
#		   struct itimerval __user *ovalue)
#
probe syscall.setitimer = kernel.function("sys_setitimer").call
{
	name = "setitimer"
	which = __int32($which)
	value_uaddr = $value
	ovalue_uaddr = $ovalue
	argstr = sprintf("%s, %s, %p", _itimer_which_str(which),
			 _struct_itimerval_u($value), $ovalue)
}
probe syscall.setitimer.return = kernel.function("sys_setitimer").return
{
	name = "setitimer"
	retstr = return_str(1, $return)
}
#
# long compat_sys_setitimer(int which,
#		struct compat_itimerval __user *in,
#		struct compat_itimerval __user *out)
#
probe syscall.compat_setitimer = kernel.function("compat_sys_setitimer").call ?
{
	name = "setitimer"
	which = __int32($which)
	value_uaddr = @__pointer($in)
	ovalue_uaddr = @__pointer($out)
	argstr = sprintf("%s, %s, %p", _itimer_which_str(which),
			 _struct_compat_itimerval_u(value_uaddr), ovalue_uaddr)
}
probe syscall.compat_setitimer.return = kernel.function("compat_sys_setitimer").return ?
{
	name = "setitimer"
	retstr = return_str(1, $return)
}

# setns ______________________________________________________
# SYSCALL_DEFINE2(setns, int, fd, int, nstype)
probe syscall.setns = kernel.function("sys_setns") ?
{
	name = "setns"
	fd = __int32($fd)
	nstype = __int32($nstype)
	argstr = sprintf("%d, %s", fd, __fork_flags(nstype));
}
probe syscall.setns.return = kernel.function("sys_setns").return ?
{
	name = "setns"
	retstr = return_str(1, $return)
}

# set_mempolicy ______________________________________________
# long sys_set_mempolicy(int mode,
#	unsigned long __user *nmask,
#	unsigned long maxnode)
#
probe syscall.set_mempolicy = __syscall.set_mempolicy ?,
	kernel.function("compat_sys_set_mempolicy").call ?
{
	name = "set_mempolicy"
	mode = __int32($mode)
	mode_str = _mempolicy_mode_str(__int32($mode))
	nmask_uaddr = $nmask
	maxnode = $maxnode
	argstr = sprintf("%s, %p, %u", _mempolicy_mode_str(__int32($mode)),
			 $nmask, $maxnode)
}
probe __syscall.set_mempolicy = kernel.function("sys_set_mempolicy") ?
{
%( arch == "powerpc" %?
	@__syscall_gate_compat_simple
%)
}
probe syscall.set_mempolicy.return = __syscall.set_mempolicy.return ?,
	kernel.function("compat_sys_set_mempolicy").return ?
{
	name = "set_mempolicy"
	retstr = return_str(1, $return)
}
probe __syscall.set_mempolicy.return =
	kernel.function("sys_set_mempolicy").return ?
{
%( arch == "powerpc" %?
	@__syscall_gate_compat_simple
%)
}

# setpgid ____________________________________________________
#
# asmlinkage long
# sys_setpgid(pid_t pid,
#		 pid_t pgid)
#
probe syscall.setpgid = kernel.function("sys_setpgid").call
{
	name = "setpgid"
	pid = __int32($pid)
	pgid = __int32($pgid)
	argstr = sprintf("%d, %d", __int32($pid), __int32($pgid))
}
probe syscall.setpgid.return = kernel.function("sys_setpgid").return
{
	name = "setpgid"
	retstr = return_str(1, $return)
}
# setpriority ________________________________________________
#
# asmlinkage long
# sys_setpriority(int which,
#		     int who,
#		     int niceval)
#
probe syscall.setpriority = kernel.function("sys_setpriority").call
{
	name = "setpriority"
	which = __int32($which)
	which_str = _priority_which_str(__int32($which))
	who = __int32($who)
	prio = __int32($niceval)
	argstr = sprintf("%s, %d, %d", which_str, __int32($who),
			 __int32($niceval))
}
probe syscall.setpriority.return = kernel.function("sys_setpriority").return
{
	name = "setpriority"
	retstr = return_str(1, $return)
}

# setregid ___________________________________________________
# long sys_setregid(gid_t rgid, gid_t egid)
#
probe syscall.setregid = kernel.function("sys_setregid").call
{
	name = "setregid"
	rgid = __int32($rgid)
	egid = __int32($egid)
	argstr = sprintf("%d, %d", rgid, egid)
}
probe syscall.setregid.return = kernel.function("sys_setregid").return
{
	name = "setregid"
	retstr = return_str(1, $return)
}
# setregid16 _________________________________________________
# long sys_setregid16(old_gid_t rgid, old_gid_t egid)
#
probe syscall.setregid16 = kernel.function("sys_setregid16").call ?
{
	name = "setregid"
	rgid = __short($rgid)
	egid = __short($egid)
	argstr = sprintf("%d, %d", rgid, egid)
}
probe syscall.setregid16.return = kernel.function("sys_setregid16").return ?
{
	name = "setregid"
	retstr = return_str(1, $return)
}
# setresgid __________________________________________________
# long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid)
#
probe syscall.setresgid = kernel.function("sys_setresgid").call
{
	name = "setresgid"
	rgid = __int32($rgid)
	egid = __int32($egid)
	sgid = __int32($sgid)
	argstr = sprintf("%d, %d, %d", rgid, egid, sgid)
}
probe syscall.setresgid.return = kernel.function("sys_setresgid").return
{
	name = "setresgid"
	retstr = return_str(1, $return)
}
# setresgid16 ________________________________________________
#
# long sys_setresgid16(old_gid_t rgid,
#		     old_gid_t egid,
#		     old_gid_t sgid)
#
probe syscall.setresgid16 = kernel.function("sys_setresgid16").call ?
{
	name = "setresgid"
	rgid = __short($rgid)
	egid = __short($egid)
	sgid = __short($sgid)
	argstr = sprintf("%d, %d, %d", rgid, egid, sgid)
}
probe syscall.setresgid16.return = kernel.function("sys_setresgid16").return ?
{
	name = "setresgid16"
	retstr = return_str(1, $return)
}

# setresuid __________________________________________________
#
# long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)
#
probe syscall.setresuid = kernel.function("sys_setresuid").call
{
	name = "setresuid"
	ruid = __int32($ruid)
	euid = __int32($euid)
	suid = __int32($suid)
	argstr = sprintf("%d, %d, %d", ruid, euid, suid)
}
probe syscall.setresuid.return = kernel.function("sys_setresuid").return
{
	name = "setresuid"
	retstr = return_str(1, $return)
}

# setresuid16 ________________________________________________
#
# long sys_setresuid16(old_uid_t ruid, old_uid_t euid, old_uid_t suid)
#
probe syscall.setresuid16 = kernel.function("sys_setresuid16").call ?
{
	name = "setresuid"
	ruid = __short($ruid)
	euid = __short($euid)
	suid = __short($suid)
	argstr = sprintf("%d, %d, %d", ruid, euid, suid)
}
probe syscall.setresuid16.return = kernel.function("sys_setresuid16").return ?
{
	name = "setresuid"
	retstr = return_str(1, $return)
}

# setreuid ___________________________________________________
# long sys_setreuid(uid_t ruid, uid_t euid)
#
probe syscall.setreuid = kernel.function("sys_setreuid").call
{
	name = "setreuid"
	ruid = __int32($ruid)
	euid = __int32($euid)
	argstr = sprintf("%d, %d", ruid, euid)
}
probe syscall.setreuid.return = kernel.function("sys_setreuid").return
{
	name = "setreuid"
	retstr = return_str(1, $return)
}
# setreuid16 _________________________________________________
# long sys_setreuid16(old_uid_t ruid, old_uid_t euid)
#
probe syscall.setreuid16 = kernel.function("sys_setreuid16").call ?
{
	name = "setreuid"
	ruid = __short($ruid)
	euid = __short($euid)
	argstr = sprintf("%d, %d", ruid, euid)
}
probe syscall.setreuid16.return = kernel.function("sys_setreuid16").return ?
{
	name = "setreuid"
	retstr = return_str(1, $return)
}

# setrlimit __________________________________________________
#
# asmlinkage long
# sys_setrlimit(unsigned int resource,
#               struct rlimit __user *rlim)
# asmlinkage long
# compat_sys_setrlimit(unsigned int resource,
#                      struct compat_rlimit __user *rlim)
#
probe syscall.setrlimit = __syscall.setrlimit ?,
	kernel.function("compat_sys_setrlimit").call ?
{
	name = "setrlimit"
	resource = $resource
	rlim_uaddr = $rlim
	argstr = sprintf("%s, %s", _rlimit_resource_str($resource),
		_struct_rlimit_u($rlim))
}
probe __syscall.setrlimit = kernel.function("sys_setrlimit").call
{
	@__syscall_gate(@const("__NR_setrlimit"))
}
probe syscall.setrlimit.return = __syscall.setrlimit.return ?,
	kernel.function("compat_sys_setrlimit").return ?
{
	name = "setrlimit"
	retstr = return_str(1, $return)
}
probe __syscall.setrlimit.return = kernel.function("sys_setrlimit").return
{
	@__syscall_gate(@const("__NR_setrlimit"))
}

# set_robust_list ____________________________________________
# SYSCALL_DEFINE2(set_robust_list, struct robust_list_head __user *, head,
#                 size_t, len)
# COMPAT_SYSCALL_DEFINE2(set_robust_list,
#                        struct compat_robust_list_head __user *, head,
#                        compat_size_t, len)
probe syscall.set_robust_list = __syscall.set_robust_list ?,
                                kernel.function("compat_sys_set_robust_list") ?
{
	name = "set_robust_list"
	list_head_uaddr = @__pointer($head)
	len = @__compat_ulong($len)
	argstr = sprintf("%p, %u", list_head_uaddr, len)
}
probe __syscall.set_robust_list = kernel.function("sys_set_robust_list")
{
	@__syscall_gate_compat_simple
}
probe syscall.set_robust_list.return = __syscall.set_robust_list.return ?,
		kernel.function("compat_sys_set_robust_list").return ?
{
	name = "set_robust_list"
	retstr = return_str(1, $return)
}
probe __syscall.set_robust_list.return =
		kernel.function("sys_set_robust_list").return
{
	@__syscall_gate_compat_simple
}

# setsid _____________________________________________________
#
# long sys_setsid(void)
#
probe syscall.setsid = kernel.function("sys_setsid").call
{
	name = "setsid"
	argstr = ""
}
probe syscall.setsid.return = kernel.function("sys_setsid").return
{
	name = "setsid"
	retstr = return_str(1, $return)
}

# setsockopt _________________________________________________
#
# long sys_setsockopt(int fd,
#		    int level,
#		    int optname,
#		    char __user *optval,
#		    int optlen)
#
probe syscall.setsockopt = __syscall.setsockopt ?,
	__syscall.socketcall.setsockopt ?,
	__syscall.compat_socketcall.setsockopt ?
{
	name = "setsockopt"
	level_str = _sockopt_level_str(level)
	optname_str = _sockopt_optname_str(optname)
	argstr = sprintf("%d, %s, %s, %p, %u", fd, level_str,
			 optname_str, optval_uaddr, optlen)
}
probe __syscall.setsockopt = kernel.function("sys_setsockopt").call ?
{
	@__syscall_gate(@const("__NR_setsockopt"))
	fd = __int32($fd)
	level = __int32($level)
	optname = __int32($optname)
	optval_uaddr = $optval
	optlen = __uint32($optlen)
}
probe __syscall.socketcall.setsockopt = kernel.function("sys_socketcall").call ?
{
	if ($call != @const("SYS_SETSOCKOPT")) next;
	fd = __int32(user_ulong(&@cast($args, "ulong")[0]))
	level = __int32(user_ulong(&@cast($args, "ulong")[1]))
	optname = __int32(user_ulong(&@cast($args, "ulong")[2]))
	optval_uaddr = user_ulong(&@cast($args, "ulong")[3])
	optlen = __uint32(user_ulong(&@cast($args, "ulong")[4]))
}
probe __syscall.compat_socketcall.setsockopt =
	kernel.function("compat_sys_socketcall").call ?
{
	if ($call != @const("SYS_SETSOCKOPT")) next;
	fd = user_int(&@cast($args, "unsigned int")[0])
	level = user_int(&@cast($args, "unsigned int")[1])
	optname = user_int(&@cast($args, "unsigned int")[2])
	optval_uaddr = user_uint32(&@cast($args, "unsigned int")[3])
	optlen = user_uint32(&@cast($args, "unsigned int")[4])
}
probe syscall.setsockopt.return = __syscall.setsockopt.return ?,
      __syscall.socketcall.setsockopt.return ?
{
	name = "setsockopt"
	retstr = return_str(1, $return)
}
probe __syscall.setsockopt.return =
	kernel.function("sys_setsockopt").return ?
{
	@__syscall_gate(@const("__NR_setsockopt"))
}
probe __syscall.socketcall.setsockopt.return =
	kernel.function("sys_socketcall").return ?,
	kernel.function("compat_sys_socketcall").return ?
{
	if (@entry($call) != @const("SYS_SETSOCKOPT")) next;
}

# set_tid_address ____________________________________________
#
# asmlinkage long
# sys_set_tid_address(int __user *tidptr)
#
probe syscall.set_tid_address = kernel.function("sys_set_tid_address").call
{
	name = "set_tid_address"
	tidptr_uaddr = $tidptr
	argstr = sprintf("%p", tidptr_uaddr)
}
probe syscall.set_tid_address.return = kernel.function("sys_set_tid_address").return
{
	name = "set_tid_address"
	retstr = return_str(1, $return)
}
# settimeofday _______________________________________________
#
# long sys_settimeofday(struct timeval __user *tv,
#			struct timezone __user *tz)
#
probe syscall.settimeofday = kernel.function("sys_settimeofday").call
{
	name = "settimeofday"
	tv_uaddr = $tv
	tz_uaddr = $tz
	argstr = sprintf("%s, %s", _struct_timeval_u($tv, 1), _struct_timezone_u($tz))
}
probe syscall.settimeofday.return = kernel.function("sys_settimeofday").return
{
	name = "settimeofday"
	retstr = return_str(1, $return)
}
#
# long sys32_settimeofday(struct compat_timeval __user *tv, struct timezone __user *tz)
# long compat_sys_settimeofday(struct compat_timeval __user *tv, struct timezone __user *tz)
#
probe syscall.settimeofday32 = kernel.function("sys32_settimeofday").call ?,
                               kernel.function("compat_sys_settimeofday").call ?
{
	name = "settimeofday"
	tv_uaddr = $tv
	tz_uaddr = $tz
	argstr = sprintf("%s, %s", _struct_compat_timeval_u($tv, 1), _struct_timezone_u($tz))
}
probe syscall.settimeofday32.return = kernel.function("sys32_settimeofday").return ?,
                                      kernel.function("compat_sys_settimeofday").return ?
{
	name = "settimeofday"
	retstr = return_str(1, $return)
}

# setuid _____________________________________________________
#
# long sys_setuid(uid_t uid)
# long sys_setuid16(old_uid_t uid)
#
probe syscall.setuid = kernel.function("sys_setuid16").call ?,
                       kernel.function("sys_setuid").call
{
	name = "setuid"
	uid = __int32($uid)
	argstr = sprint(uid)
}
probe syscall.setuid.return = kernel.function("sys_setuid16").return ?,
                              kernel.function("sys_setuid").return
{
	name = "setuid"
	retstr = return_str(1, $return)
}

# setxattr ___________________________________________________
# long sys_setxattr(char __user *path,
#		  char __user *name,
#		  void __user *value,
#		  size_t size,
#		  int flags)
#
probe syscall.setxattr = kernel.function("sys_setxattr").call
{
	name = "setxattr"
	path_uaddr = @choose_defined($pathname, $path)
	path = user_string_quoted(@choose_defined($pathname, $path))
	name_uaddr = $name
	name_str = user_string_quoted($name)
	value_uaddr = $value
	value_str = _stp_xattr_val_str($value, $size)
	size = __ulong($size)
	flags = __int32($flags)
	flags_str = _stp_xattr_flags_str(__int32($flags))
	argstr = sprintf("%s, %s, %s, %u, %s",
			user_string_quoted(@choose_defined($pathname, $path)),
			user_string_quoted($name),
			_stp_xattr_val_str($value, $size), __ulong($size),
			_stp_xattr_flags_str(__int32($flags)))
}
probe syscall.setxattr.return = kernel.function("sys_setxattr").return
{
	name = "setxattr"
	retstr = return_str(1, $return)
}
# sgetmask ___________________________________________________
#
# sys_sgetmask(void)
#
probe syscall.sgetmask = kernel.function("sys_sgetmask").call ?
{
	name = "sgetmask"
	argstr = ""
}
probe syscall.sgetmask.return = kernel.function("sys_sgetmask").return ?
{
	name = "sgetmask"
	retstr = return_str(1, $return)
}

# shmat ______________________________________________________
#
# long sys_shmat(int shmid, char __user *shmaddr, int shmflg)
#
probe syscall.shmat = kernel.function("sys_shmat").call ?
{
	name = "shmat"
	shmid = $shmid
	shmaddr_uaddr = $shmaddr
	shmflg = $shmflg
	argstr = sprintf("%d, %p, %s", $shmid, $shmaddr, _shmat_flags_str($shmflg))
}
probe syscall.shmat.return = kernel.function("sys_shmat").return ?
{
	name = "shmat"
	retstr = return_str(1, $return)
}
# compat_sys_shmat ________________________________________
#
# long compat_sys_shmat(int first, int second, compat_uptr_t third,
#			int version, void __user *uptr)
# COMPAT_SYSCALL_DEFINE3(shmat, int, shmid, compat_uptr_t, shmaddr,
#			 int, shmflg)
#
probe syscall.compat_sys_shmat = kernel.function("compat_sys_shmat").call ?
{
	name = "shmat"
%( systemtap_v < "2.3" %?
	first = @choose_defined($shmid, $first)
	second = @choose_defined($shmflg, $second)
	third = @choose_defined($third, 0)
	uptr_uaddr = @choose_defined($shmaddr, $uptr)
%)
	shmid = @choose_defined($shmid, $first)
	shmaddr_uaddr = @choose_defined($shmaddr, $uptr)
	shmflg = @choose_defined($shmflg, $second)
	argstr = sprintf("%d, %p, %s", shmid, shmaddr_uaddr,
			 _shmat_flags_str(shmflg))
}
probe syscall.compat_sys_shmat.return =	kernel.function("compat_sys_shmat").return ?
{
	name = "shmat"
	retstr = return_str(1, $return)
}

# shmctl _____________________________________________________
#
# long sys_shmctl (int shmid,
#		 int cmd,
#		 struct shmid_ds __user *buf)
#
probe syscall.shmctl = kernel.function("sys_shmctl").call ?
{
#%( arch == "powerpc" || arch == "s390" %?
	@__syscall_gate_compat_simple
#%)
	name = "shmctl"
	shmid = __int32($shmid)
	cmd = __int32($cmd)
	cmd_str = _semctl_cmd(__int32($cmd))
	buf_uaddr = $buf
	argstr = sprintf("%d, %s, %p", __int32($shmid),
			 _semctl_cmd(__int32($cmd)), $buf)
}
probe syscall.shmctl.return = kernel.function("sys_shmctl").return ?
{
#%( arch == "powerpc" || arch == "s390" %?
	@__syscall_gate_compat_simple
#%)
	name = "shmctl"
	retstr = return_str(1, $return)
}

# compat_sys_shmctl ________________________________________
#
# long compat_sys_shmctl(int first, int second, void __user *uptr)
#
probe syscall.compat_sys_shmctl = __syscall.compat_shmctl ?,
	__syscall.compat_ipc.shmctl ?
{
	name = "shmctl"
%( systemtap_v <= "2.5" %?
	first = $first
	second = $second
	uptr_uaddr = @choose_defined($uptr, $ptr)
%)
	shmid = __int32($first)
	cmd = __int32($second)
	cmd_str = _semctl_cmd(__int32($second))
	buf_uaddr = @choose_defined($uptr, $ptr)
	argstr = sprintf("%d, %s, %p", __int32($first), cmd_str, buf_uaddr)
}
probe __syscall.compat_shmctl = kernel.function("compat_sys_shmctl").call ?
{
	@__compat_syscall_gate(@const("__NR_compat_shmctl"))
}
probe __syscall.compat_ipc.shmctl = kernel.function("compat_sys_ipc").call ?,
	kernel.function("sys32_ipc").call ?
{
	if ($call != @const("SHMCTL")) next;
}

probe syscall.compat_sys_shmctl.return =
	kernel.function("compat_sys_shmctl").return ?,
	__syscall.compat_ipc.shmctl.return ?
{
	name = "shmctl"
	retstr = return_str(1, $return)
}
probe __syscall.compat_ipc.shmctl.return =
	kernel.function("compat_sys_ipc").return ?,
	kernel.function("sys32_ipc").return ?
{
	if (@entry($call) != @const("SHMCTL")) next;
}

# shmdt ______________________________________________________
#
# long sys_shmdt(char __user *shmaddr)
#
probe syscall.shmdt = kernel.function("sys_shmdt").call ?
{
	name = "shmdt"
	shmaddr_uaddr = $shmaddr
	argstr = sprintf("%p", $shmaddr)
}
probe syscall.shmdt.return = kernel.function("sys_shmdt").return ?
{
	name = "shmdt"
	retstr = return_str(1, $return)
}

# shmget _____________________________________________________
#
# long sys_shmget (key_t key,
#		 size_t size,
#		 int shmflg)
#
probe syscall.shmget = kernel.function("sys_shmget").call ?
{
	name = "shmget"
	key = __int32($key)
	size = __ulong($size)
	shmflg = __int32($shmflg)
	shmflg_str = _stp_shmget_flags_str(__int32($shmflg))
	argstr = sprintf("%d, %u, %s", __int32($key), __ulong($size),
			 shmflg_str)
}
probe syscall.shmget.return = kernel.function("sys_shmget").return ?
{
	name = "shmget"
	retstr = return_str(1, $return)
}

# shutdown ___________________________________________________
#
# long sys_shutdown(int fd, int how)
#
probe syscall.shutdown = __syscall.shutdown ?, __syscall.socketcall.shutdown ?,
	__syscall.compat_socketcall.shutdown ?
{
	name = "shutdown"
	how_str = _shutdown_how_str(how)
	argstr = sprintf("%d, %s", s, how_str)
}
probe __syscall.shutdown = kernel.function("sys_shutdown").call ?
{
	@__syscall_gate(@const("__NR_shutdown"))
	s = __int32($fd)
	how = __int32($how)
}
probe __syscall.socketcall.shutdown = kernel.function("sys_socketcall").call ?
{
	if ($call != @const("SYS_SHUTDOWN")) next;
	s = __int32(user_ulong(&@cast($args, "ulong")[0]))
	how = __int32(user_ulong(&@cast($args, "ulong")[1]))
}
probe __syscall.compat_socketcall.shutdown =
	kernel.function("compat_sys_socketcall").call ?
{
	if ($call != @const("SYS_SHUTDOWN")) next;
	s = user_int(&@cast($args, "unsigned int")[0])
	how = user_int(&@cast($args, "unsigned int")[1])
}
probe syscall.shutdown.return = __syscall.shutdown.return ?,
	__syscall.socketcall.shutdown.return ?
{
	name = "shutdown"
	retstr = return_str(1, $return)
}
probe __syscall.shutdown.return = kernel.function("sys_shutdown").return ?
{
	@__syscall_gate(@const("__NR_shutdown"))
}
probe __syscall.socketcall.shutdown.return = 
	kernel.function("sys_socketcall").return ?,
	kernel.function("compat_sys_socketcall").return ?
{
	if (@entry($call) != @const("SYS_SHUTDOWN")) next;
}

# sigaction __________________________________________________
# sys_sigaction(int sig, const struct old_sigaction __user *act, struct old_sigaction __user *oact)
# sys32_sigaction(int sig, struct old_sigaction32 __user *act, struct old_sigaction32 __user *oact)
#
probe syscall.sigaction = kernel.function("sys_sigaction").call ?
{
	name = "sigaction"
	sig = __int32($sig)
	act_uaddr = @__pointer($act)
	oact_uaddr = $oact
	argstr = sprintf("%s, {%s}, %p", _signal_name(sig),
			 _struct_sigaction_u(act_uaddr), oact_uaddr)
}
probe syscall.sigaction.return = kernel.function("sys_sigaction").return ?
{
	name = "sigaction"
	retstr = return_str(1, $return)
}
probe syscall.sigaction32 = kernel.function("sys32_sigaction").call ?,
			    kernel.function("compat_sys_sigaction").call ?
{
	name = "sigaction"
	sig = __int32($sig)
	act_uaddr = @__pointer($act)
	oact_uaddr = $oact
	argstr = sprintf("%s, {%s}, %p", _signal_name(sig),
			 _struct_old_sigaction32_u(act_uaddr), oact_uaddr)
}
probe syscall.sigaction32.return = kernel.function("sys32_sigaction").return ?,
				   kernel.function("compat_sys_sigaction").return ?
{
	name = "sigaction"
	retstr = return_str(1, $return)
}

# In kernel 3.8, CONFIG_GENERIC_SIGALTSTACK was added by 
# kernel commit 6bf9adfc90370b695cb111116e15fdc0e1906270.
#
# Then, in kernel 3.9, all architectures were switched to using the
# generic sigaltstack by kernel commit
# d64008a8f30e0b381b292788ec6f3ee509b3bb40, which also removed the
# CONFIG_GENERIC_SIGALTSTACK config variable.
#
# Thus the following preprocessor test.
%( CONFIG_GENERIC_SIGALTSTACK == "y" || kernel_v >= "3.9" %?

# sigaltstack ________________________________________________
# SYSCALL_DEFINE2(sigaltstack,const stack_t __user *,uss, stack_t __user *,uoss)
# COMPAT_SYSCALL_DEFINE2(sigaltstack,
#			const compat_stack_t __user *, uss_ptr,
#			compat_stack_t __user *, uoss_ptr)
#
probe syscall.sigaltstack = kernel.function("sys_sigaltstack").call,
	kernel.function("compat_sys_sigaltstack").call ?
{
	name = "sigaltstack"
	uss_uaddr = @__pointer(@choose_defined($uss, $uss_ptr))
	uoss_uaddr = @__pointer(@choose_defined($uoss, $uoss_ptr))
	argstr = sprintf("%s, %p",
			 (@__compat_task
			  ? _stp_compat_sigaltstack_u(uss_uaddr)
			  : _stp_sigaltstack_u(uss_uaddr)), uoss_uaddr)
}
probe syscall.sigaltstack.return = kernel.function("sys_sigaltstack").return,
	kernel.function("compat_sys_sigaltstack").return ?
{
	name = "sigaltstack"
	retstr = return_str(1, $return)
}
%)

# signal _____________________________________________________
# unsigned long sys_signal(int sig, __sighandler_t handler)
#
probe syscall.signal = kernel.function("sys_signal").call ?
{
	name = "signal"
	sig = __int32($sig)
	handler = $handler
	argstr = sprintf("%s, %s", _signal_name(sig),
			 _sighandler_str($handler))
}
probe syscall.signal.return = kernel.function("sys_signal").return ?
{
	name = "signal"
	retstr = return_str(1, $return)
}

# signalfd _____________________________________________________
#
# long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask)
# long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask,
#		 int flags)
# long compat_sys_signalfd(int ufd, const compat_sigset_t __user *sigmask,
# 		 compat_size_t sigsetsize)
# long compat_sys_signalfd4(int ufd, const compat_sigset_t __user *sigmask,
#		 compat_size_t sigsetsize, int flags)
#
probe syscall.signalfd = __syscall.signalfd4 !, __syscall.signalfd ?
{
	flags = __int32(@choose_defined($flags, 0))
	if (flags == 0) {
		name = "signalfd"
		argstr = sprintf("%d, %p, %d", __int32($ufd), @__pointer($user_mask),
				 $sizemask)
	} else {
		name = "signalfd4"
		argstr = sprintf("%d, %p, %d, %s", __int32($ufd), @__pointer($user_mask),
		       	 	 $sizemask, _signalfd4_flags_str(flags))
	}
}
probe __syscall.signalfd4 = kernel.function("sys_signalfd4").call
{
	@__syscall_gate(@const("__NR_signalfd4"))
}
probe __syscall.signalfd = kernel.function("sys_signalfd").call
{
	@__syscall_gate(@const("__NR_signalfd"))
}
probe syscall.signalfd.return = __syscall.signalfd4.return !,
				__syscall.signalfd.return ?
{
	retstr = return_str(1, $return)
}
probe __syscall.signalfd4.return = kernel.function("sys_signalfd4").return
{
	@__syscall_gate(@const("__NR_signalfd4"))
	flags = __int32(@entry($flags))
	name = (flags == 0) ? "signalfd" : "signalfd4"
}
probe __syscall.signalfd.return = kernel.function("sys_signalfd").return
{
	@__syscall_gate(@const("__NR_signalfd"))
	flags = 0
	name = "signalfd"
}
probe syscall.compat_signalfd = kernel.function("compat_sys_signalfd4").call !,
                                kernel.function("compat_sys_signalfd").call ?
{
	flags = __int32(@choose_defined($flags, 0))
	if (flags == 0) {
		name = "signalfd"
		argstr = sprintf("%d, %p, %d", __int32($ufd), @__pointer($sigmask),
				 $sigsetsize)
	} else {
		name = "signalfd4"
		argstr = sprintf("%d, %p, %d, %s", __int32($ufd), @__pointer($sigmask),
				 $sigsetsize, _signalfd4_flags_str(flags))
	}
}
probe syscall.compat_signalfd.return =
		kernel.function("compat_sys_signalfd4").return !,
		kernel.function("compat_sys_signalfd").return ?
{
	flags = __int32(@entry(@choose_defined($flags, 0)))
	name = (flags == 0) ? "signalfd" : "signalfd4"
	retstr = return_str(1, $return)
}

# sigpending _________________________________________________
# SYSCALL_DEFINE1(sigpending, old_sigset_t __user *, set)
# COMPAT_SYSCALL_DEFINE1(sigpending, compat_old_sigset_t __user *, set)
#
probe syscall.sigpending = __syscall.sigpending ?,
	kernel.function("compat_sys_sigpending").call ?
{
	name = "sigpending"
	argstr = sprintf("%p", $set)
}
probe __syscall.sigpending = kernel.function("sys_sigpending").call ?
{
	@__syscall_gate_compat_simple
}
probe syscall.sigpending.return = __syscall.sigpending.return ?,
	kernel.function("compat_sys_sigpending").return ?
{
	name = "sigpending"
	retstr = return_str(1, $return)
}
probe __syscall.sigpending.return = kernel.function("sys_sigpending").return ?
{
	@__syscall_gate_compat_simple
}

# sigprocmask ________________________________________________
# long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset)
# asmlinkage long compat_sys_sigprocmask(int how,
# 				         compat_old_sigset_t __user *nset,
#				         compat_old_sigset_t __user *oset)
#
probe syscall.sigprocmask = __syscall.sigprocmask ?,
                            kernel.function("compat_sys_sigprocmask").call ?
{
	name = "sigprocmask"
	how = __int32($how)
	how_str = _sigprocmask_how_str(how)
	set_uaddr = @__pointer(@choose_defined($set, $nset))
	oldset_uaddr = @__compat_ulong($oset)
	argstr = sprintf("%s, %p, %p", how_str, set_uaddr, oldset_uaddr)
}
probe __syscall.sigprocmask = kernel.function("sys_sigprocmask").call ?
{
	@__syscall_gate(@const("__NR_sigprocmask"))
}
probe syscall.sigprocmask.return = __syscall.sigprocmask.return ?,
	kernel.function("compat_sys_sigprocmask").return ?
{
	name = "sigprocmask"
	retstr = return_str(1, $return)
}
probe __syscall.sigprocmask.return =
	kernel.function("sys_sigprocmask").return ?
{
	@__syscall_gate(@const("__NR_sigprocmask"))
}

# sigreturn __________________________________________________
# int sys_sigreturn(unsigned long __unused)
#
probe syscall.sigreturn = kernel.function("sys_sigreturn").call ?,
                          kernel.function("sys32_sigreturn").call ?
{
	name = "sigreturn"
	argstr = ""
}
probe syscall.sigreturn.return = kernel.function("sys_sigreturn").return ?,
                                 kernel.function("sys32_sigreturn").return ?
{
	name = "sigreturn"
%( arch == "mips" && CONFIG_TRAD_SIGNALS == "y" %?
	retstr = "void"
%:
	retstr = return_str(1, $return)
%)
}

# sigsuspend _________________________________________________
# #ifdef CONFIG_OLD_SIGSUSPEND
# SYSCALL_DEFINE1(sigsuspend, old_sigset_t, mask)
# #endif
# #ifdef CONFIG_OLD_SIGSUSPEND3
# SYSCALL_DEFINE3(sigsuspend, int, unused1, int, unused2, old_sigset_t, mask)
# #endif
# asmlinkage long
# sys32_sigsuspend(int history0, int history1, old_sigset_t mask)
# long sys_sigsuspend(old_sigset_t mask)
probe syscall.sigsuspend = kernel.function("sys_sigsuspend").call ?,
	kernel.function("sys32_sigsuspend").call ?,
	kernel.function("compat_sys_sigsuspend").call ?
{
	name = "sigsuspend"
%( arch == "mips" && CONFIG_TRAD_SIGNALS == "y" %?
	mask = __ulong($uset)
%:
	mask = __ulong($mask)
%)
	argstr = sprintf("%s", _stp_sigmask_str(mask))
}
probe syscall.sigsuspend.return = kernel.function("sys_sigsuspend").return ?,
	kernel.function("sys32_sigsuspend").return ?,
	kernel.function("compat_sys_sigsuspend").return ?
{
	name = "sigsuspend"
	retstr = return_str(1, $return)
}

# socket _____________________________________________________
# long sys_socket(int family, int type, int protocol)
#
probe syscall.socket = __syscall.socket ?, __syscall.socketcall.socket ?,
	__syscall.compat_socketcall.socket ?
{
	name = "socket"
	argstr = sprintf("%s, %s, %s", _sock_family_str(family),
			 _sock_type_str(type),
			 _sock_protocol_str(family, protocol))
}
probe __syscall.socket = kernel.function("sys_socket").call ?
{
	@__syscall_gate(@const("__NR_socket"))
	family = __int32($family)
	type = __int32($type)
	protocol = __int32($protocol)
}
probe __syscall.socketcall.socket = kernel.function("sys_socketcall").call ?
{
	if ($call != @const("SYS_SOCKET")) next;
	family = __int32(user_ulong(&@cast($args, "ulong")[0]))
	type = __int32(user_ulong(&@cast($args, "ulong")[1]))
	protocol = __int32(user_ulong(&@cast($args, "ulong")[2]))
}
probe __syscall.compat_socketcall.socket =
	kernel.function("compat_sys_socketcall").call ?
{
	if ($call != @const("SYS_SOCKET")) next;
	family = user_int(&@cast($args, "unsigned int")[0])
	type = user_int(&@cast($args, "unsigned int")[1])
	protocol = user_int(&@cast($args, "unsigned int")[2])
}
probe syscall.socket.return = __syscall.return ?,
	__syscall.socketcall.socket.return ?
{
	name = "socket"
	retstr = return_str(1, $return)
}
probe __syscall.return = kernel.function("sys_socket").return ?
{
	@__syscall_gate(@const("__NR_socket"))
}
probe __syscall.socketcall.socket.return = 
	kernel.function("sys_socketcall").return ?,
	kernel.function("compat_sys_socketcall").return ?
{
	if (@entry($call) != @const("SYS_SOCKET")) next;
}

# socketcall _________________________________________________
#
# long sys_socketcall(int call, unsigned long __user *args)
#
# Note that we don't handle socketcall directly. socketcall() is just
# a multiplexer for other syscalls (accept, bind, socket, etc.).

# socketpair _________________________________________________
# long sys_socketpair(int family,
#		    int type,
#		    int protocol,
#		    int __user *usockvec)
#
probe syscall.socketpair = __syscall.socketpair ?,
	__syscall.socketcall.socketpair ?,
	__syscall.compat_socketcall.socketpair ?
{
	name = "socketpair"
	argstr = sprintf("%s, %s, %s, %p", _sock_family_str(family),
			 _sock_type_str(type),
			 _sock_protocol_str(family, protocol), sv_uaddr)
}
probe __syscall.socketpair = kernel.function("sys_socketpair").call ?
{
	@__syscall_gate(@const("__NR_socketpair"))
	family = __int32($family)
	type = __int32($type)
	protocol = __int32($protocol)
	sv_uaddr = $usockvec
}
probe __syscall.socketcall.socketpair = kernel.function("sys_socketcall").call ?
{
	if ($call != @const("SYS_SOCKETPAIR")) next;
	family = __int32(user_ulong(&@cast($args, "ulong")[0]))
	type = __int32(user_ulong(&@cast($args, "ulong")[1]))
	protocol = __int32(user_ulong(&@cast($args, "ulong")[2]))
	sv_uaddr = __uint32(user_ulong(&@cast($args, "ulong")[3]))
}
probe __syscall.compat_socketcall.socketpair =
	kernel.function("compat_sys_socketcall").call ?
{
	if ($call != @const("SYS_SOCKETPAIR")) next;
	family = user_int(&@cast($args, "unsigned int")[0])
	type = user_int(&@cast($args, "unsigned int")[1])
	protocol = user_int(&@cast($args, "unsigned int")[2])
	sv_uaddr = user_uint32(&@cast($args, "unsigned int")[3])
}
probe syscall.socketpair.return = __syscall.socketpair.return ?,
	__syscall.socketcall.socketpair.return ?
{
	name = "socketpair"
	retstr = return_str(1, $return)
}
probe __syscall.socketpair.return = kernel.function("sys_socketpair").return ?
{
	@__syscall_gate(@const("__NR_socketpair"))
}
probe __syscall.socketcall.socketpair.return = 
	kernel.function("sys_socketcall").return ?,
	kernel.function("compat_sys_socketcall").return ?
{
	if (@entry($call) != @const("SYS_SOCKETPAIR")) next;
}

# splice ___________________________________________________
#
# long sys_splice(int fd_in, loff_t __user *off_in,
#		   int fd_out, loff_t __user *off_out,
#		   size_t len, unsigned int flags)
#
probe syscall.splice = kernel.function("sys_splice").call ?
{
	name = "splice"
	fd_in = __int32($fd_in)
	off_in = $off_in
	fd_out = __int32($fd_out)
	off_out = $off_out
	len = __ulong($len)
	flags = $flags
	flags_str = (_stp_splice_flags_str(flags))
	argstr = sprintf("%d, %p, %d, %p, %u, %s", fd_in, off_in, fd_out,
	                 off_out, len, flags_str);
}
probe syscall.splice.return = kernel.function("sys_splice").return ?
{
	name = "splice"
	retstr = return_str(1, $return)
}

# ssetmask ___________________________________________________
#
# long sys_ssetmask(int newmask)
#
probe syscall.ssetmask = kernel.function("sys_ssetmask").call ?
{
	name = "ssetmask"
	newmask = __int32($newmask)
	newmask_str = _stp_sigmask_str(__int32($newmask))
	argstr = _stp_sigmask_str(__int32($newmask))
}
probe syscall.ssetmask.return = kernel.function("sys_ssetmask").return ?
{
	name = "ssetmask"
	retstr = return_str(1, $return)
}

# stat _______________________________________________________
# long sys_stat(char __user * filename, struct __old_stat __user * statbuf)
# long sys32_stat64(char __user * filename, struct stat64 __user *statbuf)
# long sys_stat64(char __user * filename, struct stat64 __user * statbuf)
# long sys_oabi_stat64(char __user * filename, struct oldabi_stat64 __user * statbuf)
# long compat_sys_newstat(char __user * filename, struct compat_stat __user *statbuf)
probe syscall.stat = kernel.function("sys_stat").call ?,
                     kernel.function("sys_newstat").call ?,
                     kernel.function("sys32_stat64").call ?,
                     kernel.function("sys_stat64").call ?,
                     kernel.function("sys_oabi_stat64").call ?,
                     kernel.function("compat_sys_newstat").call ?
{
	name = "stat"
	filename_uaddr = $filename
	filename = user_string_quoted($filename)
	buf_uaddr = $statbuf
	argstr = sprintf("%s, %p", user_string_quoted($filename), buf_uaddr)
}
probe syscall.stat.return = kernel.function("sys_stat").return ?,
                            kernel.function("sys_newstat").return ?,
                            kernel.function("sys32_stat64").return ?,
                            kernel.function("sys_stat64").return ?,
                            kernel.function("sys_oabi_stat64").return ?,
                            kernel.function("compat_sys_newstat").return ?
{
	name = "stat"
	retstr = return_str(1, $return)
}

# statfs _____________________________________________________
# long sys_statfs(const char __user * path, struct statfs __user * buf)
# long compat_sys_statfs(const char __user *path, struct compat_statfs __user *buf)
#
probe syscall.statfs = kernel.function("compat_sys_statfs").call ?,
                       kernel.function("sys_statfs").call ?
{
	name = "statfs"
	buf_uaddr = $buf
	path = user_string_quoted(@choose_defined($pathname, $path))
	argstr = sprintf("%s, %p",
		user_string_quoted(@choose_defined($pathname, $path)),
		$buf)
}

probe syscall.statfs.return = kernel.function("compat_sys_statfs").return ?,
                              kernel.function("sys_statfs").return ?
{
	name = "statfs"
	retstr = return_str(1, $return)
}

# statfs64 ___________________________________________________
#
# long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf)
# long compat_sys_statfs64(const char __user *path, compat_size_t sz, struct compat_statfs64 __user *buf)
#
probe syscall.statfs64 = kernel.function("sys_statfs64").call ?,
	kernel.function("compat_sys_statfs64").call ?
{
	name = "statfs64"
	path = user_string_quoted(@choose_defined($pathname, $path))
	sz = __ulong($sz)
	buf_uaddr = $buf
	argstr = sprintf("%s, %u, %p",
			 user_string_quoted(@choose_defined($pathname, $path)),
			 sz, $buf)
}
probe syscall.statfs64.return = kernel.function("sys_statfs64").return ?,
	kernel.function("compat_sys_statfs64").return ?
{
	name = "statfs64"
	retstr = return_str(1, $return)
}

# stime ______________________________________________________
#
# long sys_stime(time_t __user *tptr)
# long compat_sys_stime(compat_time_t __user *tptr)
#
probe syscall.stime = kernel.function("compat_sys_stime").call ?,
                      kernel.function("sys_stime").call ?
{
	name = "stime"
	t_uaddr = $tptr
	/* FIXME. Decode time */
	argstr = sprintf("%p", $tptr)
}
probe syscall.stime.return = kernel.function("compat_sys_stime").return ?,
                             kernel.function("sys_stime").return ?
{
	name = "stime"
	retstr = return_str(1, $return)
}

# swapoff ____________________________________________________
#
# asmlinkage long
# sys_swapoff(const char __user * specialfile)
#
probe syscall.swapoff = kernel.function("sys_swapoff").call ?
{
	name = "swapoff"
	path = user_string_quoted($specialfile)
	argstr = user_string_quoted($specialfile)
}
probe syscall.swapoff.return = kernel.function("sys_swapoff").return ?
{
	name = "swapoff"
	retstr = return_str(1, $return)
}
# swapon _____________________________________________________
#
# asmlinkage long
# sys_swapon(const char __user * specialfile,
#		int swap_flags)
#
probe syscall.swapon = kernel.function("sys_swapon").call ?
{
	name = "swapon"
	path = user_string_quoted($specialfile)
	swapflags = __int32($swap_flags)
	swapflags_str = _swapon_flags_str(__int32($swap_flags))
	argstr = sprintf("%s, %s", user_string_quoted($specialfile),
			 swapflags_str)
}
probe syscall.swapon.return = kernel.function("sys_swapon").return ?
{
	name = "swapon"
	retstr = return_str(1, $return)
}

# symlink ____________________________________________________
# long sys_symlink(const char __user * oldname,
#		 const char __user * newname)
probe syscall.symlink = kernel.function("sys_symlink").call
{
	name = "symlink"
	oldpath = user_string_quoted($oldname)
	newpath = user_string_quoted($newname)
	argstr = sprintf("%s, %s", user_string_quoted($oldname),
		user_string_quoted($newname))
}
probe syscall.symlink.return = kernel.function("sys_symlink").return
{
	name = "symlink"
	retstr = return_str(1, $return)
}

# symlinkat __________________________________________________
# new function with 2.6.16
# long sys_symlinkat(const char __user *oldname, int newdfd,
#	const char __user *newname)
probe syscall.symlinkat = kernel.function("sys_symlinkat").call ?
{
	@__syscall_compat_gate(@const("__NR_symlinkat"),
			       @const("__NR_compat_symlinkat"))
	name = "symlinkat"
	oldname = $oldname
	oldname_str = user_string_quoted($oldname)
	newdfd = __int32($newdfd)
	newdfd_str = _dfd_str(__int32($newdfd))
	newname = $newname
	newname_str = user_string_quoted($newname)
	argstr = sprintf("%s, %s, %s", user_string_quoted($oldname),
		newdfd_str, user_string_quoted($newname))
}
probe syscall.symlinkat.return = kernel.function("sys_symlinkat").return ?
{
	@__syscall_compat_gate(@const("__NR_symlinkat"),
			       @const("__NR_compat_symlinkat"))
	name = "symlinkat"
	retstr = return_str(1, $return)
}

# sync _______________________________________________________
#
# sys_sync(void)
#
probe syscall.sync = kernel.function("sys_sync").call
{
	name = "sync"
	argstr = ""
}
probe syscall.sync.return = kernel.function("sys_sync").return
{
	name = "sync"
	retstr = return_str(1, $return)
}

# sync_file_range ____________________________________________
#
# Why is there a 'sync_file_range' and a 'sync_file_range2'? As the
# man page says:
#
#   Some architectures (e.g., PowerPC, ARM) need 64-bit arguments to be
#   aligned in a suitable pair of registers. On such architectures, the
#   call signature of sync_file_range()... would force a register to be
#   be wasted as padding between the 'fd' and 'offset' arguments.
#
# SYSCALL_DEFINE4(sync_file_range, int, fd, loff_t, offset, loff_t, nbytes,
#				unsigned int, flags)
# SYSCALL_DEFINE4(sync_file_range2, int, fd, unsigned int, flags,
#				 loff_t, offset, loff_t, nbytes)
#
# But, sync_file_range2() is just a wrapper around sync_file_range, so
# we can just probe that.
probe syscall.sync_file_range = kernel.function("sys_sync_file_range").call ?
{
	name = "sync_file_range"
	fd = __int32($fd)
	offset = $offset
	nbytes = $nbytes
	flags = __uint32($flags)
	flags_str = _sync_file_range_flags_str(flags)
	argstr = sprintf("%d, %d, %d, %s", fd, $offset, $nbytes,
			 _sync_file_range_flags_str(flags))
}
probe syscall.sync_file_range.return =
	kernel.function("sys_sync_file_range").return ?
{
	name = "sync_file_range"
	retstr = return_str(1, $return)
}

# syncfs _____________________________________________________
#
# SYSCALL_DEFINE1(syncfs, int, fd)
probe syscall.syncfs = kernel.function("sys_syncfs").call ?
{
	name = "syncfs"
	fd = __int32($fd)
	argstr = sprintf("%d", fd)
}
probe syscall.syncfs.return = kernel.function("sys_syncfs").return ?
{
	name = "syncfs"
	retstr = return_str(1, $return)
}

# sysctl _____________________________________________________
#
# long sys_sysctl(struct __sysctl_args __user *args)
#
probe syscall.sysctl = kernel.function("compat_sys_sysctl").call ?,
                       kernel.function("sys_sysctl").call ?
{
	name = "sysctl"
	argstr = sprintf("%p", $args)
}
probe syscall.sysctl.return = kernel.function("compat_sys_sysctl").return ?,
                              kernel.function("sys_sysctl").return ?
{
	name = "sysctl"
	retstr = return_str(1, $return)
}

# sysfs ______________________________________________________
#
# asmlinkage long
# sys_sysfs(int option,
#	     unsigned long arg1,
#	     unsigned long arg2)
#
probe syscall.sysfs = kernel.function("sys_sysfs").call
{
	name = "sysfs"
	option = __int32($option)
	arg1 = $arg1
	arg2 = $arg2
	if (option == 1)
		argstr = sprintf("%d, %s", __int32($option),
				 user_string_quoted($arg1))
	else if (option == 2)
		argstr = sprintf("%d, %d, %p", __int32($option), $arg1, $arg2)
	else if (option == 3)
		argstr = sprintf("%d", __int32($option))
	else
		argstr = sprintf("%d, 0x%x, 0x%x", __int32($option), $arg1,
				 $arg2)
}
probe syscall.sysfs.return = kernel.function("sys_sysfs").return
{
	name = "sysfs"
	retstr = return_str(1, $return)
}

# sysinfo ____________________________________________________
#
# long sys_sysinfo(struct sysinfo __user *info)
# long compat_sys_sysinfo(struct compat_sysinfo __user *info)
probe syscall.sysinfo = kernel.function("compat_sys_sysinfo").call ?,
                        kernel.function("sys_sysinfo").call
{
	name = "sysinfo"
	info_uaddr = $info
	argstr = sprintf("%s", _struct_sysinfo_u(info_uaddr))
}
probe syscall.sysinfo.return = kernel.function("compat_sys_sysinfo").return ?,
                               kernel.function("sys_sysinfo").return
{
	name = "sysinfo"
	retstr = return_str(1, $return)
}

# syslog _____________________________________________________
#
# long sys_syslog(int type, char __user * buf, int len)
#
probe syscall.syslog = kernel.function("sys_syslog").call
{
	name = "syslog"
	type = __int32($type)
	bufp_uaddr = $buf
	len = __int32($len)
	argstr = sprintf("%d, %p, %d", __int32($type), $buf, __int32($len))
}
probe syscall.syslog.return = kernel.function("sys_syslog").return
{
	name = "syslog"
	retstr = return_str(1, $return)
}

# tee _____________________________________________________
#
# long sys_tee(int fdin, int fdout, size_t len, unsigned int flags)
#
probe syscall.tee = kernel.function("sys_tee").call ?
{
	name = "tee"
	fdin = __int32($fdin)
	fdout = __int32($fdout)
	len = @__compat_ulong($len)
	flags = __uint32($flags)
	argstr = sprintf("%d, %d, %u, 0x%x", fdin, fdout, len, flags)
}
probe syscall.tee.return = kernel.function("sys_tee").return ?
{
	name = "tee"
	retstr = return_str(1, $return)
}

# tgkill _____________________________________________________
#
# asmlinkage long
# sys_tgkill(int tgid,
#		int pid,
#		int sig)
#
probe syscall.tgkill = kernel.function("sys_tgkill").call
{
	name = "tgkill"
	tgid = __int32($tgid)
	pid = __int32($pid)
	sig = __int32($sig)
	argstr = sprintf("%d, %d, %s", __int32($tgid), __int32($pid),
			 _signal_name(__int32($sig)))
}
probe syscall.tgkill.return = kernel.function("sys_tgkill").return
{
	name = "tgkill"
	retstr = return_str(1, $return)
}
# time _______________________________________________________
#
# long sys_time(time_t __user * tloc)
# long sys_time64(long __user * tloc)
# long sys32_time(compat_time_t __user * tloc)
# long compat_sys_time(compat_time_t __user * tloc)
#
probe syscall.time = kernel.function("sys32_time").call ?,
                     kernel.function("sys_time64").call ?,
                     kernel.function("compat_sys_time").call ?,
                     kernel.function("sys_time").call ?
{
	name = "time"
	t_uaddr = $tloc
	argstr = sprintf("%p", $tloc)
}
probe syscall.time.return = kernel.function("sys32_time").return ?,
                            kernel.function("sys_time64").return ?,
                            kernel.function("compat_sys_time").return ?,
                            kernel.function("sys_time").return ?
{
	name = "time"
	retstr = return_str(1, $return)
}

# timer_create _______________________________________________
#
# long sys_timer_create(clockid_t which_clock,
#			struct sigevent __user *timer_event_spec,
#			timer_t __user * created_timer_id)
# long compat_sys_timer_create(clockid_t which_clock,
#			struct sigevent __user *timer_event_spec,
#			timer_t __user * created_timer_id)
#
probe syscall.timer_create = __syscall.timer_create,
                             kernel.function("compat_sys_timer_create").call ?
{
	name = "timer_create"
	clockid = __int32($which_clock)
	clockid_str = _get_wc_str(__int32($which_clock))
	evp_uaddr = $timer_event_spec
	timerid_uaddr = $created_timer_id
	argstr = sprintf("%s, %p, %p", clockid_str, $timer_event_spec, $created_timer_id)
}
probe __syscall.timer_create = kernel.function("sys_timer_create").call
{
	@__syscall_gate(@const("__NR_timer_create"))
}
probe syscall.timer_create.return =
	__syscall.timer_create.return,
	kernel.function("compat_sys_timer_create").return ?
{
	name = "timer_create"
	retstr = return_str(1, $return)
}
probe __syscall.timer_create.return = kernel.function("sys_timer_create").return
{
	@__syscall_gate(@const("__NR_timer_create"))
}

# timer_delete _______________________________________________
#
# long sys_timer_delete(timer_t timer_id)
#
probe syscall.timer_delete = kernel.function("sys_timer_delete").call
{
	name = "timer_delete"
	timerid = __int32($timer_id)
	argstr = sprint(__int32($timer_id))
}
probe syscall.timer_delete.return = kernel.function("sys_timer_delete").return
{
	name = "timer_delete"
	retstr = return_str(1, $return)
}

# timer_getoverrun ___________________________________________
#
# long sys_timer_getoverrun(timer_t timer_id)
#
probe syscall.timer_getoverrun = kernel.function("sys_timer_getoverrun").call
{
	name = "timer_getoverrun"
	timerid = __int32($timer_id)
	argstr = sprint(__int32($timer_id))
}
probe syscall.timer_getoverrun.return = kernel.function("sys_timer_getoverrun").return
{
	name = "timer_getoverrun"
	retstr = return_str(1, $return)
}

# timer_gettime ______________________________________________
#
# long sys_timer_gettime(timer_t timer_id,
#			 struct itimerspec __user *setting)
# long compat_sys_timer_gettime(timer_t timer_id,
#			 struct itimerspec __user *setting)
#
probe syscall.timer_gettime = __syscall.timer_gettime,
                              kernel.function("compat_sys_timer_gettime").call ?
{
	name = "timer_gettime"
	timerid = __int32($timer_id)
	value_uaddr = $setting
	argstr = sprintf("%d, %p", __int32($timer_id), $setting)
}
probe __syscall.timer_gettime = kernel.function("sys_timer_gettime").call
{
	@__syscall_gate(@const("__NR_timer_gettime"))
}
probe syscall.timer_gettime.return =
        __syscall.timer_gettime.return,
        kernel.function("compat_sys_timer_gettime").return ?
{
	name = "timer_gettime"
	retstr = return_str(1, $return)
}
probe __syscall.timer_gettime.return = kernel.function("sys_timer_gettime").return
{
	@__syscall_gate(@const("__NR_timer_gettime"))
}

# timer_settime ______________________________________________
#
# long sys_timer_settime(timer_t timer_id,
#			 int flags,
#			 const struct itimerspec __user *new_setting,
#			 struct itimerspec __user *old_setting)
# long compat_sys_timer_settime(timer_t timer_id, int flags,
#			  struct compat_itimerspec __user *new,
#			  struct compat_itimerspec __user *old)
#
probe syscall.timer_settime = __syscall.timer_settime,
                              kernel.function("compat_sys_timer_settime").call ?
{
	name = "timer_settime"
	timerid = __int32($timer_id)
	flags = __int32($flags)
	value_uaddr  = @choose_defined($new, $new_setting)
	ovalue_uaddr = @choose_defined($old, $old_setting)
	argstr = sprintf("%d, %d, %s, %p", __int32($timer_id), __int32($flags),
%( CONFIG_COMPAT == "y" %?
			 (@__compat_task ?
	                  _struct_compat_itimerspec_u(value_uaddr) :
	                  _struct_itimerspec_u(value_uaddr)),
%:
	                 _struct_itimerspec_u(value_uaddr),
%)
	                 ovalue_uaddr)
}
probe __syscall.timer_settime = kernel.function("sys_timer_settime").call
{
	@__syscall_gate(@const("__NR_timer_settime"))
}
probe syscall.timer_settime.return =
	__syscall.timer_settime.return,
	kernel.function("compat_sys_timer_settime").return ?
{
	name = "timer_settime"
	retstr = return_str(1, $return)
}
probe __syscall.timer_settime.return =
	kernel.function("sys_timer_settime").return
{
	@__syscall_gate(@const("__NR_timer_settime"))
}

# timerfd ______________________________________________
#
# Note that timerfd() only existed between kernels 2.6.22 and 2.6.25
# and was replaced by timerfd_create(), timerfd_gettime(),
# and timerfd_settime().
#
# long sys_timerfd(int ufd, int clockid, int flags,
#	    const struct itimerspec __user *utmr)
# long compat_sys_timerfd(int ufd, int clockid, int flags,
#  	   const struct compat_itimerspec __user *utmr)
#
probe syscall.timerfd = kernel.function("sys_timerfd").call ?,
                        kernel.function("compat_sys_timerfd").call ?
{
	name = "timerfd"
	argstr = sprintf("%d, %d, 0x%x", $ufd, @__pointer($clockid), $flags)
}
probe syscall.timerfd.return = kernel.function("sys_timerfd").return ?,
                               kernel.function("compat_sys_timerfd").return ?
{
	name = "timerfd"
	retstr = return_str(1, $return)
}

# timerfd_create _____________________________________________
#
# SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags)
probe syscall.timerfd_create = kernel.function("sys_timerfd_create").call ?
{
	name = "timerfd_create"
	clockid = __int32($clockid)
	clockid_str = _get_wc_str(clockid)
	flags = __int32($flags)
	flags_str = _stp_timerfd_flags_str(flags)
	argstr = sprintf("%s, %s", clockid_str, flags_str)
}
probe syscall.timerfd_create.return =
	kernel.function("sys_timerfd_create").return ?
{
	name = "timerfd_create"
	retstr = return_str(1, $return)
}

# timerfd_gettime_____________________________________________
#
# SYSCALL_DEFINE2(timerfd_gettime, int, ufd, struct itimerspec __user *, otmr)
# COMPAT_SYSCALL_DEFINE2(timerfd_gettime, int, ufd,
#		struct compat_itimerspec __user *, otmr)
probe syscall.timerfd_gettime = __syscall.timerfd_gettime ?,
	kernel.function("compat_sys_timerfd_gettime").call ?
{
	name = "timerfd_gettime"
	fd = __int32($ufd)
	value_uaddr = @__pointer($otmr)
	argstr = sprintf("%d, %p", fd, value_uaddr)
}
probe __syscall.timerfd_gettime = kernel.function("sys_timerfd_gettime").call ?
{
	@__syscall_gate_compat_simple
}
probe syscall.timerfd_gettime.return = __syscall.timerfd_gettime.return ?,
	kernel.function("compat_sys_timerfd_gettime").return ?
{
	name = "timerfd_gettime"
	retstr = return_str(1, $return)
}
probe __syscall.timerfd_gettime.return =
	kernel.function("sys_timerfd_gettime").return ?
{
	@__syscall_gate_compat_simple
}

# timerfd_settime ____________________________________________
#
# SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,
#		const struct itimerspec __user *, utmr,
#		struct itimerspec __user *, otmr)
# COMPAT_SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,
#		const struct compat_itimerspec __user *, utmr,
#		struct compat_itimerspec __user *, otmr)
probe syscall.timerfd_settime = __syscall.timerfd_settime ?,
	kernel.function("compat_sys_timerfd_settime").call ?
{
	name = "timerfd_settime"
	fd = __int32($ufd)
	flags = __int32($flags)
	flags_str = _stp_timerfd_flags_str(flags)
	value_uaddr = @__pointer($utmr)
	ovalue_uaddr = @__pointer($otmr)
	argstr = sprintf("%d, %s, %s, %p", fd, flags_str,
%( CONFIG_COMPAT == "y" %?
	                 (@__compat_task ?
	                  _struct_compat_itimerspec_u(value_uaddr) :
	                  _struct_itimerspec_u(value_uaddr)),
%:
	                  _struct_itimerspec_u(value_uaddr),
%)
	                 ovalue_uaddr)
}
probe __syscall.timerfd_settime = kernel.function("sys_timerfd_settime").call ?
{
	@__syscall_gate_compat_simple
}
probe syscall.timerfd_settime.return = __syscall.timerfd_settime.return ?,
	kernel.function("compat_sys_timerfd_settime").return ?
{
	name = "timerfd_settime"
	retstr = return_str(1, $return)
}
probe __syscall.timerfd_settime.return =
	kernel.function("sys_timerfd_settime").return ?
{
	@__syscall_gate_compat_simple
}

# times ______________________________________________________
#
# long sys_times(struct tms __user * tbuf)
# long compat_sys_times(struct compat_tms __user *tbuf)
probe syscall.times = kernel.function("compat_sys_times").call ?,
                      kernel.function("sys_times").call ?
{
	name = "times"
	buf_uaddr = $tbuf
	argstr = sprintf("%s", _struct_tms_u(buf_uaddr))
}
probe syscall.times.return = kernel.function("compat_sys_times").return ?,
                             kernel.function("sys_times").return ?
{
	name = "times"
	retstr = return_str(1, $return)
}

# tkill ______________________________________________________
#
# asmlinkage long
# sys_tkill(int pid,
#	     int sig)
#
probe syscall.tkill = kernel.function("sys_tkill").call
{
	name = "tkill"
	pid = __int32($pid)
	sig = __int32($sig)
	argstr = sprintf("%d, %s", __int32($pid), _signal_name(__int32($sig)))
}
probe syscall.tkill.return = kernel.function("sys_tkill").return
{
	name = "tkill"
	retstr = return_str(1, $return)
}

# truncate ___________________________________________________
#
# sys_truncate(const char __user * path, unsigned long length)
# sys_truncate64(const char __user * path, loff_t length)
# COMPAT_SYSCALL_DEFINE2(truncate, const char __user *, path,
#			 compat_off_t, length)
#
probe syscall.truncate = __syscall.truncate ?, __syscall.truncate64 ?,
	__syscall.compat_truncate ?
{
	name = "truncate"
	path_uaddr = @__pointer($path)
	path = user_string_quoted(path_uaddr)
	argstr = sprintf("%s, %d", user_string_quoted(path_uaddr), length)
}
probe __syscall.truncate = kernel.function("sys_truncate").call ?
{
	@__syscall_compat_gate(@const("__NR_truncate"), @const("__NR_compat_truncate"))
	length = @__compat_long($length)
}
probe __syscall.truncate64 = kernel.function("sys_truncate64").call ?
{
	length = $length
}
probe __syscall.compat_truncate = kernel.function("compat_sys_truncate").call ?
{
	length = __int32($length)
}
probe syscall.truncate.return = __syscall.truncate.return ?,
                                kernel.function("sys_truncate64").return ?,
				kernel.function("compat_sys_truncate").return ?
{
	name = "truncate"
	retstr = return_str(1, $return)
}
probe __syscall.truncate.return = kernel.function("sys_truncate").return ?
{
	@__syscall_compat_gate(@const("__NR_truncate"), @const("__NR_compat_truncate"))
}

# tux ________________________________________________________
# long sys_tux (unsigned int action, user_req_t *u_info)
#
probe syscall.tux = kernel.function("sys_tux").call ?
{
	name = "tux"
	action = $action
	u_info_uaddr = $u_info
	argstr = sprintf("%d, %p", $action, $u_info)
}
probe syscall.tux.return = kernel.function("sys_tux").return ?
{
	name = "tux"
	retstr = return_str(1, $return)
}

# umask ______________________________________________________
# long sys_umask(int mask)
#
probe syscall.umask = kernel.function("sys_umask").call
{
	name = "umask"
	mask = __uint32($mask)
	argstr = sprintf("%#o", __uint32($mask))
}
probe syscall.umask.return = kernel.function("sys_umask").return
{
	name = "umask"
	retstr = return_str(3, $return)
}

# umount _____________________________________________________
# long sys_umount(char __user * name, int flags)
# SYSCALL_DEFINE1(oldumount, char __user *, name)
#
probe syscall.umount = __syscall.umount, __syscall.oldumount ?
{
	name = "umount"
}
probe __syscall.umount = kernel.function("sys_umount").call
{
	@__syscall_compat_gate(@const("__NR_umount2"), @const("__NR_compat_umount2"))
	target = user_string_quoted($name)
	flags = $flags
	flags_str = _umountflags_str($flags)
	argstr = sprintf("%s, %s", user_string_quoted($name), flags_str)
}
probe __syscall.oldumount = kernel.function("sys_oldumount").call ?
{
	target = user_string_quoted($name)
	flags = 0
	flags_str = _umountflags_str(0)
	argstr = sprintf("%s, %s", user_string_quoted($name), flags_str)
}
probe syscall.umount.return = __syscall.umount.return,
			      kernel.function("sys_oldumount").return ?
{
	name = "umount"
	retstr = return_str(1, $return)
}
probe __syscall.umount.return = kernel.function("sys_umount").return
{
	@__syscall_compat_gate(@const("__NR_umount2"), @const("__NR_compat_umount2"))
}

# uname ______________________________________________________
#
# int sys_uname(struct old_utsname __user *name)
# long sys_newuname(struct new_utsname __user * name)
# int sys_olduname(struct oldold_utsname __user * name)
# int sys32_olduname(struct oldold_utsname __user * name)
# long sys32_uname(struct old_utsname __user * name)
#
probe syscall.uname = kernel.function("sys_uname").call ?,
                      kernel.function("sys_olduname").call ?,
                      kernel.function("sys32_olduname").call ?,
                      kernel.function("sys32_uname").call ?,
                      kernel.function("sys_newuname").call ?
{
	name = "uname"
	argstr = sprintf("%p", $name)
}

probe syscall.uname.return = kernel.function("sys_uname").return ?,
                             kernel.function("sys_olduname").return ?,
                             kernel.function("sys32_olduname").return ?,
                             kernel.function("sys32_uname").return ?,
                             kernel.function("sys_newuname").return ?
{
	name = "uname"
	retstr = return_str(1, $return)
}

# unlink _____________________________________________________
# long sys_unlink(const char __user * pathname)
#
probe syscall.unlink = kernel.function("sys_unlink").call
{
	name = "unlink"
	pathname_uaddr = $pathname
	pathname = user_string_quoted($pathname)
	argstr = user_string_quoted($pathname)
}
probe syscall.unlink.return = kernel.function("sys_unlink").return
{
	name = "unlink"
	retstr = return_str(1, $return)
}

# unlinkat ___________________________________________________
# new function with 2.6.16
# long sys_unlinkat(int dfd, const char __user *pathname,
#	int flag)
probe syscall.unlinkat = kernel.function("sys_unlinkat").call ?
{
	name = "unlinkat"
	dfd = __int32($dfd)
	dfd_str = _dfd_str(__int32($dfd))
	pathname = $pathname
	pathname_str = user_string_quoted($pathname)
	flag = __uint32($flag)
	flag_str = _at_flag_str(__uint32($flag))
	argstr = sprintf("%s, %s, %s", dfd_str, user_string_quoted($pathname),
			 flag_str)
}
probe syscall.unlinkat.return = kernel.function("sys_unlinkat").return ?
{
	name = "unlinkat"
	retstr = return_str(1, $return)
}

# unshare ____________________________________________________
# new function with 2.6.16
# long sys_unshare(unsigned long unshare_flags)
probe syscall.unshare = kernel.function("sys_unshare").call ?
{
	name = "unshare"
	unshare_flags = $unshare_flags
	argstr = __fork_flags(unshare_flags)
}
probe syscall.unshare.return = kernel.function("sys_unshare").return ?
{
	name = "unshare"
	retstr = return_str(1, $return)
}

# uselib _____________________________________________________
#
# asmlinkage long
# sys_uselib(const char __user * library)
#
probe syscall.uselib = kernel.function("sys_uselib").call ?
{
	name = "uselib"
	library_uaddr = $library
	library = user_string_quoted($library)
	argstr = user_string_quoted($library)
}
probe syscall.uselib.return = kernel.function("sys_uselib").return ?
{
	name = "uselib"
	retstr = return_str(1, $return)
}

# userfaultfd ________________________________________________
# SYSCALL_DEFINE2(userfaultfd, int, flags)
probe syscall.userfaultfd = kernel.function("sys_userfaultfd").call ?
{
	name = "userfaultfd"
	flags = __int32($flags)
	flags_str = _userfaultfd_flags_str(flags)
	argstr = sprintf("%s", _userfaultfd_flags_str(flags))
}
probe syscall.userfaultfd.return = kernel.function("sys_userfaultfd").return ?
{
	name = "userfaultfd"
	retstr = return_str(1, $return)
}

# ustat ______________________________________________________
# long sys_ustat(unsigned dev, struct ustat __user * ubuf)
#
probe syscall.ustat = kernel.function("sys_ustat").call
{
	name = "ustat"
	dev = __uint32($dev)
	ubuf_uaddr = $ubuf
	argstr = sprintf("%u, %p", __uint32($dev), $ubuf)
}

# long sys32_ustat(unsigned dev, struct ustat32 __user *u32p)
# long compat_sys_ustat(unsigned dev, struct compat_ustat __user *u)
#
probe syscall.ustat32 = kernel.function("compat_sys_ustat").call ?,
      		        kernel.function("sys32_ustat").call ?
{
	name = "ustat"
	dev = __uint32($dev)
	ubuf_uaddr = @choose_defined($u, $u32p)
	argstr = sprintf("%u, %p", __uint32($dev), @choose_defined($u, $u32p))
}

probe syscall.ustat.return = kernel.function("sys_ustat").return ?
{
	name = "ustat"
	retstr = return_str(1, $return)
}

probe syscall.ustat32.return = kernel.function("sys32_ustat").return ?,
                               kernel.function("compat_sys_ustat").return ?
{
	name = "ustat"
	retstr = return_str(1, $return)
}

# utime ______________________________________________________
# long sys_utime(char __user * filename, struct utimbuf __user * times)
probe syscall.utime = kernel.function("sys_utime").call ?
{
	name = "utime"
	filename_uaddr = $filename
	filename = user_string_quoted($filename)
	buf_uaddr = $times
	# On s390, '$times' is a long, so the @cast() is needed.
	actime = user_long(&@cast($times, "utimbuf")->actime)
	modtime = user_long(&@cast($times, "utimbuf")->modtime)
	argstr = sprintf("%s, [%s, %s]", user_string_quoted($filename),
		ctime(actime), ctime(modtime))
}
probe syscall.utime.return = kernel.function("sys_utime").return ?
{
	name = "utime"
	retstr = return_str(1, $return)
}

# long compat_sys_utime(char __user *filename, struct compat_utimbuf __user *t)
probe syscall.compat_utime = kernel.function("compat_sys_utime").call ?
{
	name = "utime"
	filename_uaddr = $filename
	filename = user_string_quoted($filename)
	buf_uaddr = $t
	actime = _struct_compat_utimbuf_actime(buf_uaddr)
	modtime = _struct_compat_utimbuf_modtime(buf_uaddr)
	argstr = sprintf("%s, [%s, %s]", user_string_quoted($filename),
		ctime(actime), ctime(modtime))
}
probe syscall.compat_utime.return = kernel.function("compat_sys_utime").return ?
{
	name = "utime"
	retstr = return_str(1, $return)
}

# utimes _____________________________________________________
#
# long sys_utimes(char __user * filename, struct timeval __user * utimes)
#
probe syscall.utimes = kernel.function("sys_utimes").call
{
	name = "utimes"
	filename_uaddr = $filename
	filename = user_string_quoted($filename)
	tvp_uaddr = $utimes
	argstr = sprintf("%s, %s", user_string_quoted($filename),
		_struct_timeval_u($utimes, 2))
}
probe syscall.utimes.return = kernel.function("sys_utimes").return
{
	name = "utimes"
	retstr = return_str(1, $return)
}
# compat_sys_utimes ________________________________________
#
# long compat_sys_utimes(char __user *filename, struct compat_timeval __user *t)
#
probe syscall.compat_sys_utimes = kernel.function("compat_sys_utimes").call ?
{
	name = "utimes"
	filename = user_string_quoted($filename)
	argstr = sprintf("%s, %s", user_string_quoted($filename),
		_struct_compat_timeval_u($t, 2))
}
probe syscall.compat_sys_utimes.return = kernel.function("compat_sys_utimes").return ?
{
	name = "utimes"
	retstr = return_str(1, $return)
}

# utimensat ____________________________________________________
# long sys_utimensat(int dfd, char __user *filename, struct timespec __user *utimes, int flags)
# long compat_sys_utimensat(unsigned int dfd, char __user *filename, struct compat_timespec __user *t, int flags)
#
probe syscall.utimensat = kernel.function("sys_utimensat").call ?
{
	name = "utimensat"
	dfd = __int32($dfd)
	dfd_str = _dfd_str(__int32($dfd))
	filename_uaddr = $filename
	filename = user_string_quoted($filename)
	tsp_uaddr = $utimes
	flags = __int32($flags)
	flags_str = _at_flag_str(__int32($flags))
	argstr = sprintf("%s, %s, %s, %s", _dfd_str(__int32($dfd)),
			 user_string_quoted($filename),
			 _struct_timespec_u($utimes, 2),
			 _at_flag_str(__int32($flags)))
}
probe syscall.compat_utimensat = kernel.function("compat_sys_utimensat").call ?
{
	name = "utimensat"
	dfd = __int32($dfd)
	dfd_str = _dfd_str(__int32($dfd))
	filename_uaddr = $filename
	filename = user_string_quoted($filename)
	tsp_uaddr = $t
	flags = __int32($flags)
	flags_str = _at_flag_str(__int32($flags))
	argstr = sprintf("%s, %s, %s, %s", _dfd_str(__int32($dfd)),
			 user_string_quoted($filename),
			 _struct_compat_timespec_u($t, 2),
			 _at_flag_str(__int32($flags)))
}
probe syscall.utimensat.return = kernel.function("sys_utimensat").return ?
{
	name = "utimensat"
	retstr = return_str(1, $return)
}
probe syscall.compat_utimensat.return =  kernel.function("compat_sys_utimensat").return ?
{
	name = "utimensat"
	retstr = return_str(1, $return)
}

# vfork _______________________________________________________
#
# SYSCALL_DEFINE0(vfork)
#
probe syscall.vfork = kernel.function("sys_vfork").call ?
{
	name = "vfork"
	argstr = ""
}
probe syscall.vfork.return = kernel.function("sys_vfork").return ?
{
	name = "vfork"
	retstr = return_str(1, $return)
}

# vhangup ____________________________________________________
#
# asmlinkage long
# sys_vhangup(void)
#
probe syscall.vhangup = kernel.function("sys_vhangup").call
{
	name = "vhangup"
	argstr = ""
}
probe syscall.vhangup.return = kernel.function("sys_vhangup").return
{
	name = "vhangup"
	retstr = return_str(1, $return)
}

# vmsplice ___________________________________________________
#
# long sys_vmsplice(int fd, const struct iovec __user *iov,
#	    unsigned long nr_segs, unsigned int flags)
# long compat_sys_vmsplice(int fd, const struct compat_iovec __user *iov32,
#	    unsigned int nr_segs, unsigned int flags)
#
probe syscall.vmsplice = kernel.function("sys_vmsplice").call ?
{
	@__syscall_gate_compat_simple
	name = "vmsplice"
	fd = __int32($fd)
	iov = $iov
	nr_segs = __ulong($nr_segs)
	flags = $flags
	flags_str = _stp_splice_flags_str(flags)
	argstr = sprintf("%d, %p, %u, %s", fd, iov, nr_segs, flags_str)
}
probe syscall.compat_vmsplice = kernel.function("compat_sys_vmsplice").call ?
{
	name = "vmsplice"
	fd = __int32($fd)
	iov = @__pointer($iov32)
	nr_segs = __uint32($nr_segs)
	flags = $flags
	flags_str = _stp_splice_flags_str(flags)
	argstr = sprintf("%d, %p, %u, %s", fd, iov, nr_segs, flags_str)
}
probe syscall.vmsplice.return = kernel.function("sys_vmsplice").return ?
{
	@__syscall_gate_compat_simple
	name = "vmsplice"
	retstr = return_str(1, $return)
}
probe syscall.compat_vmsplice.return = kernel.function("compat_sys_vmsplice").return ?
{
	name = "vmsplice"
	retstr = return_str(1, $return)
}

# wait4 ______________________________________________________
#
# long sys_wait4(pid_t pid,
#	     int __user *stat_addr,
#	     int options,
#	     struct rusage __user *ru)
# COMPAT_SYSCALL_DEFINE4(wait4,
#	compat_pid_t, pid,
#	compat_uint_t __user *, stat_addr,
#	int, options,
#	struct compat_rusage __user *, ru)
#
probe syscall.wait4 = __syscall.wait4, __syscall.compat_wait4 ?
{
	name = "wait4"
	pid = __int32(@choose_defined($upid, $pid))
	status_uaddr = @__pointer($stat_addr)
	options = __int32($options)
	options_str = _wait4_opt_str(options)
	rusage_uaddr = @__pointer($ru)
	argstr = sprintf("%d, %p, %s, %p", pid, status_uaddr, options_str,
			 rusage_uaddr)
}
probe __syscall.wait4 = kernel.function("sys_wait4").call
{
	@__syscall_gate(@const("__NR_wait4"))
}
probe __syscall.compat_wait4 = kernel.function("compat_sys_wait4").call ?
{
	@__compat_syscall_gate(@const("__NR_compat_wait4"))
}
probe syscall.wait4.return = __syscall.wait4.return,
	__syscall.compat_wait4.return ?
{
	name = "wait4"

	if (returnval () <= 0)
		status_str = "N/A"
	else if (@entry($stat_addr) == 0)
		status_str = "NULL"
	else
		status_str = _wait_status_str(user_int(@entry($stat_addr)))

	retstr = return_str(1, $return)
}
probe __syscall.wait4.return = kernel.function("sys_wait4").return
{
	@__syscall_gate(@const("__NR_wait4"))
}
probe __syscall.compat_wait4.return =
	kernel.function("compat_sys_wait4").return ?
{
	@__compat_syscall_gate(@const("__NR_compat_wait4"))
}

# waitid _____________________________________________________
#
# long sys_waitid(int which,
#		pid_t pid,
#		struct siginfo __user *infop,
#		int options,
#		struct rusage __user *ru)
# COMPAT_SYSCALL_DEFINE5(waitid,
#		int, which, compat_pid_t, pid,
#		struct compat_siginfo __user *, uinfo, int, options,
#		struct compat_rusage __user *, uru)
#
probe syscall.waitid = __syscall.waitid,
	kernel.function("compat_sys_waitid").call ?
{
	name = "waitid"
	which = __int32($which)
	which_str = _waitid_which_str(__int32($which))
	pid = __int32(@choose_defined($upid, $pid))
	infop_uaddr = @__pointer(@choose_defined($infop, $uinfo))
	options = $options
	options_str = _wait4_opt_str($options)
	rusage_uaddr = @choose_defined($ru, $uru)
	argstr = sprintf("%s, %d, %p, %s, %p",
			 _waitid_which_str(__int32($which)),
			 __int32(@choose_defined($upid, $pid)),
			 infop_uaddr, _wait4_opt_str($options),
			 @__pointer(@choose_defined($ru, $uru)))
}
probe __syscall.waitid = kernel.function("sys_waitid").call
{
	@__syscall_gate_compat_simple
}
probe syscall.waitid.return = __syscall.waitid.return,
	kernel.function("compat_sys_waitid").return ?
{
	name = "waitid"
	retstr = return_str(1, $return)
}
probe __syscall.waitid.return = kernel.function("sys_waitid").return
{
	@__syscall_gate_compat_simple
}

# waitpid ____________________________________________________
#
# (waitpid is usually implemented via wait4 but not always)
# SYSCALL_DEFINE3(waitpid, pid_t, pid, int __user *, stat_addr, int, options)
#
probe syscall.waitpid = kernel.function("sys_waitpid").call ?,
	kernel.function("sys32_waitpid").call ?
{
	name = "waitpid"
	pid = __int32($pid)
	status_uaddr = $stat_addr
	options = __int32($options)
	options_str = _wait4_opt_str(options)
	argstr = sprintf("%d, %p, %s", __int32($pid), $stat_addr, options_str)
}
probe syscall.waitpid.return = kernel.function("sys_waitpid").return ?,
	kernel.function("sys32_waitpid").return ?
{
	name = "waitpid"
	retstr = return_str(1, $return)
}

# write ______________________________________________________
#
# ssize_t sys_write(unsigned int fd,
#	     const char __user * buf,
#	     size_t count)
#
probe syscall.write =
%( arch == "s390" %?
	__syscall.write, kernel.function("sys32_write").call ?
%:
	__syscall.write
%)
{
	name = "write"
	fd = __int32($fd)
	buf_uaddr = $buf
	count = __ulong($count)
	argstr = sprintf("%d, %s, %u", __int32($fd),
		user_buffer_quoted($buf, $count, syscall_string_trunc),
		__ulong($count))
}
probe __syscall.write = kernel.function("sys_write").call
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}
probe syscall.write.return =
%( arch == "s390" %?
	__syscall.write.return, kernel.function("sys32_write").return ?
%:
	__syscall.write.return
%)
{
	name = "write"
	retstr = return_str(1, $return)
}
probe __syscall.write.return = kernel.function("sys_write").return
{
%( arch == "s390" %?
	@__syscall_gate(@const("__NR_write"))
%)
}

# writev _____________________________________________________
#
# ssize_t sys_writev(unsigned long fd,
#		const struct iovec __user *vec,
#		unsigned long vlen)
# ssize_t compat_sys_writev(unsigned long fd,
#		const struct compat_iovec __user *vec,
#		unsigned long vlen)
#
probe syscall.writev = kernel.function("compat_sys_writev").call ?,
                       kernel.function("sys_writev").call
{
	name = "writev"
	vector_uaddr = $vec
	count = __int32($vlen)
	# Although the kernel gets an unsigned long fd, on the
	# user-side it is a signed int.  Fix this.
	fd = __int32($fd)
	argstr = sprintf("%d, %p, %d", __int32($fd), $vec, __int32($vlen))
}
probe syscall.writev.return = kernel.function("compat_sys_writev").return ?,
                              kernel.function("sys_writev").return
{
	name = "writev"
	retstr = return_str(1, $return)
}
