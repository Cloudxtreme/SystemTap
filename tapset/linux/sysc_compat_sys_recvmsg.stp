# compat_sys_recvmsg ________________________________________
#
# long compat_sys_recvmsg(int fd,
#				struct compat_msghdr __user *msg,
#				unsigned int flags)
#
# On all tested kernels/architectures, the compat recvmsg() syscall
# goes through compat_sys_socketcall(). compat_sys_socketcall() then
# calls an inlined version of compat_sys_recvmsg() on some
# architectures (like ppc64). So, the only reliable thing to do here
# is just probe compat_sys_socketcall().
#
# Note that this probe should have been either called
# 'syscall.compat_recvmsg' or just merged with 'syscall.recvmsg'.
#

@define _SYSCALL_COMPAT_SYS_RECVMSG_NAME
%(
	name = "recvmsg"
%)

@define _SYSCALL_COMPAT_SYS_RECVMSG_ARGSTR
%(
	argstr = sprintf("%d, %p, %s", s, msg_uaddr, flags_str)
%)

probe syscall.compat_sys_recvmsg = dw_syscall.compat_sys_recvmsg !, nd_syscall.compat_sys_recvmsg {}
probe syscall.compat_sys_recvmsg.return = dw_syscall.compat_sys_recvmsg.return !, nd_syscall.compat_sys_recvmsg.return {}

# dw_compat_sys_recvmsg _____________________________________________________

probe dw_syscall.compat_sys_recvmsg =
	kernel.function("compat_sys_socketcall").call ?
{
	if ($call != @const("SYS_RECVMSG")) next;
	@_SYSCALL_COMPAT_SYS_RECVMSG_NAME
	s = user_int(&@cast($args, "unsigned int")[0])
	msg_uaddr = user_uint32(&@cast($args, "unsigned int")[1])
	flags = user_uint32(&@cast($args, "unsigned int")[2])
	flags_str = _msg_flags_str(flags)
	@_SYSCALL_COMPAT_SYS_RECVMSG_ARGSTR
}
probe dw_syscall.compat_sys_recvmsg.return =
 	kernel.function("compat_sys_socketcall").return ?
{
	if (@entry($call) != @const("SYS_RECVMSG")) next;
	@_SYSCALL_COMPAT_SYS_RECVMSG_NAME
	retstr = return_str(1, $return)
}

# nd_compat_sys_recvmsg _____________________________________________________

probe nd_syscall.compat_sys_recvmsg =
	kprobe.function("compat_sys_socketcall").call ?
{
	asmlinkage()
	if (int_arg(1) != @const("SYS_RECVMSG")) next;
	@_SYSCALL_COMPAT_SYS_RECVMSG_NAME
	__args = &@cast(pointer_arg(2), "unsigned int", "kernel<linux/types.h>")
	s = user_int(&(__args)[0])
	msg_uaddr = user_uint32(&(__args)[1])
	flags = user_uint32(&(__args)[2])
	flags_str = _msg_flags_str(flags)
	@_SYSCALL_COMPAT_SYS_RECVMSG_ARGSTR
}
probe nd_syscall.compat_sys_recvmsg.return =
	kprobe.function("compat_sys_socketcall").return ?
{
	if (@entry(__asmlinkage_int_arg(1)) != @const("SYS_RECVMSG")) next;
	@_SYSCALL_COMPAT_SYS_RECVMSG_NAME
	retstr = returnstr(1)
}
