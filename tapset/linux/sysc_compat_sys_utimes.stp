# compat_sys_utimes ________________________________________
#
# long compat_sys_utimes(char __user *filename, struct compat_timeval __user *t)
#

@define _SYSCALL_COMPAT_SYS_UTIMES_NAME
%(
	name = "utimes"
%)

@define _SYSCALL_COMPAT_SYS_UTIMES_ARGSTR
%(
	argstr = sprintf("%s, %s", filename, timeval_str)
%)

probe syscall.compat_sys_utimes = dw_syscall.compat_sys_utimes !,
                                  nd_syscall.compat_sys_utimes {}
probe syscall.compat_sys_utimes.return = dw_syscall.compat_sys_utimes.return !,
                                         nd_syscall.compat_sys_utimes.return {}

# dw_compat_sys_utimes _____________________________________________________

probe dw_syscall.compat_sys_utimes = kernel.function("compat_sys_utimes").call ?
{
	@_SYSCALL_COMPAT_SYS_UTIMES_NAME
	filename = user_string_quoted($filename)
	timeval = $t
	timeval_str = _struct_compat_timeval_u(timeval, 2)
	@_SYSCALL_COMPAT_SYS_UTIMES_ARGSTR
}
probe dw_syscall.compat_sys_utimes.return = kernel.function("compat_sys_utimes").return ?
{
	@_SYSCALL_COMPAT_SYS_UTIMES_NAME
	retstr = return_str(1, $return)
}

# nd_compat_sys_utimes _____________________________________________________

probe nd_syscall.compat_sys_utimes = kprobe.function("compat_sys_utimes") ?
{
	@_SYSCALL_COMPAT_SYS_UTIMES_NAME
	asmlinkage()
	filename = user_string_quoted(pointer_arg(1))
	timeval = pointer_arg(2)
	timeval_str = _struct_compat_timeval_u(timeval, 2)
	@_SYSCALL_COMPAT_SYS_UTIMES_ARGSTR
}
probe nd_syscall.compat_sys_utimes.return = kprobe.function("compat_sys_utimes").return ?
{
	@_SYSCALL_COMPAT_SYS_UTIMES_NAME
	retstr = returnstr(1)
}
