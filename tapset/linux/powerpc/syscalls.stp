
# fadvise64 _______________________________________________________
#
# long ppc32_fadvise64(int fd, u32 unused, u32 offset_high, u32 offset_low,
# 		     size_t len, int advice)
probe syscall.compat_fadvise64 = kernel.function("ppc32_fadvise64").call ?
{
	name = "fadvise64"
	fd = __int32($fd)
	offset = (($offset_high << 32) | $offset_low)
	len = __int32($len)
	advice = __int32($advice)
	argstr = sprintf("%d, %d, %d, %s", fd, offset, len,
			 _fadvice_advice_str(advice))
}
probe syscall.compat_fadvise64.return =
	kernel.function("ppc32_fadvise64").return ?
{
	name = "fadvise64"
	retstr = return_str(1, $return)
}

# fadvise64 _______________________________________________________
#
# long ppc_fadvise64_64(int fd, int advice, u32 offset_high, u32 offset_low,
#		      u32 len_high, u32 len_low)
probe syscall.compat_fadvise64_64 = kernel.function("ppc_fadvise64_64").call ?
{
	name = "fadvise64"
	fd = __int32($fd)
	advice = __int32($advice)
	offset = (($offset_high << 32) | $offset_low)
	len = (($len_high << 32) | $len_low)
	argstr = sprintf("%d, %d, %d, %s", fd, offset, len,
			 _fadvice_advice_str(advice))
}
probe syscall.compat_fadvise64_64.return =
	kernel.function("ppc_fadvise64_64").return ?
{
	name = "fadvise64"
	retstr = return_str(1, $return)
}

# fallocate __________________________________________________
#
# asmlinkage long compat_sys_fallocate(int fd, int mode, u32 offhi, u32 offlo,
#				     u32 lenhi, u32 lenlo)
probe syscall.compat_fallocate = kernel.function("compat_sys_fallocate") ?
{
	name = "fallocate"
	fd = __int32($fd)
	mode = __int32($mode)
	offset = (($offhi << 32) | $offlo)
	len = (($lenhi << 32) | $lenlo)
	argstr = sprintf("%d, %s, %#x, %u", fd, _stp_fallocate_mode_str(mode),
			 offset, len)
}
probe syscall.compat_fallocate.return =
	kernel.function("compat_sys_fallocate").return ?
{
	name = "fallocate"
	retstr = return_str(1, $return)
}

%( kernel_v < "3.7" %?
# execve _____________________________________________________
#
# In kernels < 3.7, sys_execve() was in arch-specific code (and had
# varying arguments). It was just a wrapper around generic
# do_execve(), but the wrapper could error out before calling
# do_execve(). So, we'll have to handle it in arch-specific tapset
# code to catch all calls.
#
#  int sys_execve(unsigned long a0, unsigned long a1, unsigned long a2,
#	       unsigned long a3, unsigned long a4, unsigned long a5,
#	       struct pt_regs *regs)
probe syscall.execve = kernel.function("sys_execve").call
{
	name = "execve"
	filename = user_string_quoted($a0)
	args = __get_argv($a1, 0)
	env_str = __count_envp($a2)
	argstr = sprintf("%s, %s, %s", filename, args, env_str)
}
probe syscall.execve.return = kernel.function("sys_execve").return
{
	name = "execve"
	retstr = return_str(1, $return)
}

# execve _____________________________________________________
#
#  long compat_sys_execve(unsigned long a0, unsigned long a1, unsigned long a2,
#		  unsigned long a3, unsigned long a4, unsigned long a5,
#		  struct pt_regs *regs)
probe syscall.compat_execve = kernel.function("compat_sys_execve").call ?
{
	name = "execve"
	filename = user_string_quoted($a0)
	args = __get_compat_argv($a1, 0)
	env_str = __count_compat_envp($a2)
	argstr = sprintf("%s, %s, %s", filename, args, env_str)
}
probe syscall.compat_execve.return =
	kernel.function("compat_sys_execve").return ?
{
	name = "execve"
	retstr = return_str(1, $return)
}
%)

# lookup_dcookie _____________________________________________
# COMPAT_SYSCALL_DEFINE4(lookup_dcookie, u32, w0, u32, w1, char __user *, buf,
#                        compat_size_t, len)
# long ppc32_lookup_dcookie(u32 cookie_high, u32 cookie_low, char __user *buf,
#                           size_t len)
#
probe syscall.compat_lookup_dcookie =
		kernel.function("compat_sys_lookup_dcookie") ?,
		kernel.function("ppc32_lookup_dcookie") ?
{
        name = "lookup_dcookie"
        cookie = (@choose_defined($w0, $cookie_high) << 32 | @choose_defined($w1, $cookie_low))
        buffer_uaddr = $buf
        len = __ulong($len)
        argstr = sprintf("%#lx, %p, %#x", cookie, buffer_uaddr, len)
}
probe syscall.compat_lookup_dcookie.return =
		kernel.function("compat_sys_lookup_dcookie").return ?,
		kernel.function("ppc32_lookup_dcookie").return ?
{
        name = "lookup_dcookie"
        retstr = return_str(1, $return)
}
