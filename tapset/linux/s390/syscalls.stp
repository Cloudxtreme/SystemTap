
%( kernel_v < "3.7" %?
# execve _____________________________________________________
#
#   asmlinkage long sys32_execve(struct pt_regs regs)
#   asmlinkage long sys32_execve(char __user *name, compat_uptr_t __user *argv,
#			     compat_uptr_t __user *envp)
probe syscall.compat_execve = kernel.function("sys32_execve").call ?
{
	name = "execve"
%( kernel_v < "2.6.32" %?
	# The fact that the struct is passed in instead of a pointer
	# confuses things.
	__regs = &@cast(ulong_arg(1), "pt_regs", "kernel<asm/ptrace.h>")
	filename = user_string_quoted(__regs->orig_gpr2 & 0x7fffffff)
	args = __get_compat_argv(__regs->gprs[3] & 0x7fffffff, 0)
	env_str = __count_compat_envp(__regs->gprs[4] & 0x7fffffff)
%:
	filename = user_string_quoted(@choose_defined($name, $filename))
	args = __get_compat_argv($argv, 0)
	env_str = __count_compat_envp($envp)
%)
	argstr = sprintf("%s, %s, %s", filename, args, env_str)
}
probe syscall.compat_execve.return = kernel.function("sys32_execve").return ?
{
	name = "execve"
	retstr = return_str(1, $return)
}
%)

# lookup_dcookie _____________________________________________
# long sys_lookup_dcookie(u64 cookie64, char __user * buf, size_t len)
# there is compat_SyS_lookup_dcookie on thel7, but not on older distros,
# in this case probing for sys_lookup_dcookie seems safe
probe syscall.compat_lookup_dcookie = kernel.function("sys_lookup_dcookie").call ?
{
	name = "lookup_dcookie"
	cookie = $cookie64
	buffer_uaddr = $buf
	len = __ulong($len)
	argstr = sprintf("%#lx, %p, %#x", $cookie64, $buf, $len)
}
probe syscall.compat_lookup_dcookie.return = kernel.function("sys_lookup_dcookie").return ?
{
	name = "lookup_dcookie"
	retstr = return_str(1, $return)
}
