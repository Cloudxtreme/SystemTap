# fadvise64_64 __________________________________________________
#
# COMPAT_SYSCALL_DEFINE1(s390_fadvise64_64,
#			 struct fadvise64_64_args __user *, args)
# struct fadvise64_64_args {
#	int fd;
#	long long offset;
#	long long len;
#	int advice;
#};


@define _SYSCALL_COMPAT_FADVISE64_64_NAME
%(
	name = "fadvise64"
%)

@define _SYSCALL_COMPAT_FADVISE64_64_ARGSTR
%(
	argstr = sprintf("%d, %d, %d, %s", fd, offset, len, advice_str)
%)

probe syscall.compat_fadvise64_64 = dw_syscall.compat_fadvise64_64 !,
                                    nd_syscall.compat_fadvise64_64 {}
probe syscall.compat_fadvise64_64.return = dw_syscall.compat_fadvise64_64.return !,
                                           nd_syscall.compat_fadvise64_64.return {}

# dw_compat_fadvise64_64 _____________________________________________________

probe dw_syscall.compat_fadvise64_64 = kernel.function("sys32_fadvise64_64").call ?
{
	@_SYSCALL_COMPAT_FADVISE64_64_NAME
	fd = user_int(&$args->fd)
	offset = user_int64(&$args->offset)
	len = user_int64(&$args->len)
	advice = user_int(&$args->advice)
	advice_str = _fadvice_advice_str(advice)
	@_SYSCALL_COMPAT_FADVISE64_64_ARGSTR
}
probe dw_syscall.compat_fadvise64_64.return =
	kernel.function("sys32_fadvise64_64").return ?
{
	@_SYSCALL_COMPAT_FADVISE64_64_NAME
	retstr = return_str(1, $return)
}

# nd_compat_fadvise64_64 _____________________________________________________

probe nd_syscall.compat_fadvise64_64 = kprobe.function("sys32_fadvise64_64") ?
{
	@_SYSCALL_COMPAT_FADVISE64_64_NAME
	__args = &@cast(pointer_arg(1), "unsigned int", "kernel<linux/types.h>")
	fd = user_int(&(__args)[0])
	offset = user_int64(&(__args)[2])
	len = user_uint64(&(__args)[4])
	advice = user_int(&(__args)[6])
	advice_str = _fadvice_advice_str(advice)
	@_SYSCALL_COMPAT_FADVISE64_64_ARGSTR
}
probe nd_syscall.compat_fadvise64_64.return =
	kprobe.function("sys32_fadvise64_64").return ?
{
	@_SYSCALL_COMPAT_FADVISE64_64_NAME
	retstr = returnstr(1)
}
