# semtimedop _________________________________________________
#
# long sys_semtimedop(int semid,
#		    struct sembuf __user *tsops,
#		    unsigned nsops,
#		    const struct timespec __user *timeout)
#

@define _SYSCALL_SEMTIMEDOP_NAME
%(
	name = "semtimedop"
%)

@define _SYSCALL_SEMTIMEDOP_ARGSTR
%(
	argstr = sprintf("%d, %p, %u, %s", semid, sops_uaddr, nsops, timeout_str)
%)

probe syscall.semtimedop = dw_syscall.semtimedop !, nd_syscall.semtimedop ? {}
probe syscall.semtimedop.return = dw_syscall.semtimedop.return !,
                                  nd_syscall.semtimedop.return ? {}

# dw_semtimedop _____________________________________________________

probe dw_syscall.semtimedop = kernel.function("sys_semtimedop").call ?
{
	@__syscall_gate_compat_simple
	@_SYSCALL_SEMTIMEDOP_NAME
	semid = __int32($semid)
	sops_uaddr = $tsops
	nsops = __uint32($nsops)
	timeout_uaddr = $timeout
	timeout_str = _struct_timespec_u(timeout_uaddr, 1)
	@_SYSCALL_SEMTIMEDOP_ARGSTR
}
probe dw_syscall.semtimedop.return = kernel.function("sys_semtimedop").return ?
{
	@__syscall_gate_compat_simple
	@_SYSCALL_SEMTIMEDOP_NAME
	retstr = return_str(1, $return)
}

# nd_semtimedop _____________________________________________________

probe nd_syscall.semtimedop = kprobe.function("sys_semtimedop") ?
{
	@__syscall_gate_compat_simple
	@_SYSCALL_SEMTIMEDOP_NAME
	asmlinkage()
	semid = int_arg(1)
	sops_uaddr = pointer_arg(2)
	nsops = uint_arg(3)
	timeout_uaddr = pointer_arg(4)
	timeout_str = _struct_timespec_u(timeout_uaddr, 1)
	@_SYSCALL_SEMTIMEDOP_ARGSTR
}
probe nd_syscall.semtimedop.return = kprobe.function("sys_semtimedop").return ?
{
	@__syscall_gate_compat_simple
	@_SYSCALL_SEMTIMEDOP_NAME
	retstr = returnstr(1)
}
