# long sys32_rt_sigaction(int sig,
#		struct sigaction32 __user *act,
#		struct sigaction32 __user *oact,
#		unsigned int sigsetsize)
# ppc only
# compat_sys_rt_sigaction(int sig,
#			const struct sigaction32 __user *act,
#			struct sigaction32 __user *oact,
#			size_t sigsetsize)


@define _SYSCALL_RT_SIGACTION32_NAME
%(
	name = "rt_sigaction"
%)

@define _SYSCALL_RT_SIGACTION32_ARGSTR
%(
	argstr = sprintf("%s, {%s}, %p, %d", sig_str, act_str, oact_uaddr, sigsetsize) 
%)

probe syscall.rt_sigaction32 = dw_syscall.rt_sigaction32 !, nd_syscall.rt_sigaction32 {}
probe syscall.rt_sigaction32.return = dw_syscall.rt_sigaction32.return !, nd_syscall.rt_sigaction32.return {}

# dw_rt_sigaction32 _____________________________________________________

probe dw_syscall.rt_sigaction32 = kernel.function("sys32_rt_sigaction").call ?,
                               kernel.function("compat_sys_rt_sigaction").call ?
{
	@_SYSCALL_RT_SIGACTION32_NAME
	sig = __int32($sig)
	sig_str = _signal_name(sig)
	act_uaddr = @__pointer($act)
	act_str = _struct_sigaction32_u(act_uaddr)
	oact_uaddr = $oact
	sigsetsize = $sigsetsize
	@_SYSCALL_RT_SIGACTION32_ARGSTR
}
probe dw_syscall.rt_sigaction32.return =
	kernel.function("sys32_rt_sigaction").return ?,
	kernel.function("compat_sys_rt_sigaction").return ?
{
	@_SYSCALL_RT_SIGACTION32_NAME
	retstr = return_str(1, $return)
}

# nd_rt_sigaction32 _____________________________________________________

probe nd_syscall.rt_sigaction32 = kprobe.function("sys32_rt_sigaction") ?,
                                  kprobe.function("compat_sys_rt_sigaction") ?
{
	@_SYSCALL_RT_SIGACTION32_NAME
	asmlinkage()
	sig = int_arg(1)
	sig_str = _signal_name(sig)
	act_uaddr = pointer_arg(2)
	act_str = _struct_sigaction32_u(act_uaddr)
	oact_uaddr = pointer_arg(3)
	sigsetsize = uint_arg(4)
	@_SYSCALL_RT_SIGACTION32_ARGSTR
}
probe nd_syscall.rt_sigaction32.return =
	kprobe.function("sys32_rt_sigaction").return ?,
	kprobe.function("compat_sys_rt_sigaction").return ?
{
	@_SYSCALL_RT_SIGACTION32_NAME
	retstr = returnstr(1)
}
