global probed

probe begin {
  probed["function"] = 0;
  probed["statement"] = 0;
  probed["plt"] = 0;
  probed["provider"] = 0;
  probed["mark"] = 0;
  printf("systemtap starting probe\n");
}

probe process($1).function("*") {
  if ($1 != pid()) {
    error("failed in process(PID).function(\"*\")");
  } else if (!probed["function"]){
    probed["function"] ++;
  }
}

probe process($1).function("main").label("marker_here") ? {
  if ($1 != pid())
    error("failed in process(PID).function(main).label(marker_here)");
  // gcc may not provide enough information to for stap to see this point, hence
  // why it's optional. since it's optional, don't keep track of whether it's
  // been seen.
}

probe process($1).statement("*") {
  if ($1 != pid()) {
    error("failed in process(PID).statement\"*\")");
  } else if (!probed["statement"]){
    probed["statement"]++;
  }
}

probe process($1).plt {
  if ($1 != pid()) {
    error("failed in process(PID).plt");
  } else if (!probed["plt"]){
    probed["plt"] ++;
  }
}

probe process($1).provider("*").mark("*") {
  if ($1 != pid()) {
    error("failed in process(PID).provider(\"*\").mark(\"*\")");
  } else if (!probed["provider"]){
    probed["provider"] ++;
  }
}

probe process($1).mark("*") {
  if ($1 != pid()) {
    error("failed in process(PID).mark(\"*\")");
  } else if (!probed["mark"]){
    probed["mark"] ++;
  }
}

probe end {
  printf("systemtap ending probe\n");
  if (probed["function"] > 0 && probed["plt"] > 0 && probed["mark"] > 0
      && probed["statement"] > 0 && probed["provider"] > 0)
    printf("pass\n");
  else
    printf("fail: did not hit all probe points successfully.\n");
}
