/*
 * set_kernel.stp
 *
 * Check that the set_kernel_* functions work correctly.
 */

probe begin {  println("systemtap starting probe")  }
probe end   {  println("systemtap ending probe")    }

global errors = 0

function assert_string(test, expected, value)
{
    if (value == expected)
        return 1
    printf("systemtap test failure - %s: expected \"%s\", got \"%s\"\n",
           test, expected, value)
    errors++
    return 0
}

function assert_number(test, expected, value)
{
    if (value == expected)
        return 1
    printf("systemtap test failure - %s: expected %#x, got %#x\n",
           test, expected, value)
    errors++
    return 0
}

probe end(1)
{   
    try {
       test = "set_user_string"
       addr = get_buffer()
       if (assert_string(test, "", user_string(addr))) {
           set_user_string(addr, "foobar")
           assert_string(test, "foobar", user_string(addr))
       }  
    }catch {
	  println("set_user_string error")
          errors++
    }
    
    try {
       test = "set_user_string_n"
       addr = get_buffer()
       if (assert_string(test, "", user_string(addr))) {
           set_user_string_n(addr, 10, "foobar")
           if (assert_string(test, "foobar", user_string(addr))) {
               set_user_string_n(addr, 3, "foobar")
               assert_string(test, "foo", user_string(addr))
           }
       }
    } catch {
	 println("set_user_string_n error")
	 errors++
    }
    
    try {
       test = "set_user_long"
       addr = get_buffer()
       long_val = %( CONFIG_64BIT == "y" %? 0x123456789ABCDEF0 %: 0x12345678 %)
       if (assert_number(test, 0, user_long(addr))) {
           set_user_long(addr, long_val)
           assert_number(test, long_val, user_long(addr))
       }
    } catch{
	    println("set_user_long error")
	    errors++
    }

    try {
       test = "set_user_int"
       addr = get_buffer()
       if (assert_number(test, 0, user_int(addr))) {
           set_user_int(addr, 0x12345678)
           assert_number(test, 0x12345678, user_int(addr))
       }
    } catch {
	    println("set_user_int error")
	    errors++
    }

    try {
        test = "set_user_short"
        addr = get_buffer()
        if (assert_number(test, 0, user_short(addr))) {
          set_kernel_short(addr, 0x1234)
          assert_number(test, 0x1234, user_short(addr))
        }
    } catch {
	    println("set_user_short error")
	    errors++
    }

    try {
       test = "set_user_char"
       addr = get_buffer()
       if (assert_number(test, 0, user_char(addr))) {
           set_user_char(addr, 0x12)
           assert_number(test, 0x12, user_char(addr))
       }
    } catch {
	    println("set_user_char error")
	    errors++
    }

    if (!errors)
        println("systemtap test success")
}

function get_buffer:long () %{
    static char buffer[MAXSTRINGLEN];
    memset(buffer, 0, sizeof(buffer));
    STAP_RETVALUE = (long)buffer;
%}
