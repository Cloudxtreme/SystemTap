set test "cast-scope"
set ::result_string {function direct: {._M_dataplus={._M_p="Hello World!"}}
function cast: {._M_dataplus={._M_p="Hello World!"}}
mark cast: {._M_dataplus={._M_p="Hello World!"}}
statement direct: {._M_dataplus={._M_p="Hello World!"}}
statement cast: {._M_dataplus={._M_p="Hello World!"}}}

set srcfile "$srcdir/$subdir/$test.cxx"
set stpfile "$srcdir/$subdir/$test.stp"

for {set i 0} {$i < [all_compile_flags]} {incr i} {
  set extra_flag [all_compile_flag $i]
  set extra_name [all_compile_flag_name $i]
  set test_flags "compiler=g++ additional_flags=-g [sdt_includes] $extra_flag"
  set res [target_compile "$srcfile" $test-$extra_name.exe executable "$test_flags"]
  if { $res != "" } {
      verbose "target_compile failed: $res" 2
      fail "$test-$extra_name compile"
      untested "$test-$extra_name"
      continue
  } else {
      pass "$test-$extra_name compile"
  }

  if {[installtest_p] && [uprobes_p]} {
    # On some builds without any optimization our prologue detection
    # fails. PR13420
    if {$extra_name == "m64" || $extra_name == "m32" || $extra_name == "m31"} { setup_kfail 13420 "*-*-*" }
    stap_run3 "$test-$extra_name" "$stpfile" -c ./$test-$extra_name.exe
  } else {
    untested "$test-$extra_name"
  }
  catch {exec rm -f $test-$extra_name.exe}
}
